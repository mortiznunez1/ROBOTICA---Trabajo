
BrazoExcavador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080073c0  080073c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e0  080077e0  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080077e0  080077e0  000087e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e8  080077e8  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000087e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077ec  080077ec  000087ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080077f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000907c  2**0
                  CONTENTS
 10 .bss          000003b8  2000007c  2000007c  0000907c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000434  20000434  0000907c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a1f  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279b  00000000  00000000  0001bacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0001e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0c  00000000  00000000  0001f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023203  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015429  00000000  00000000  0004342f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db014  00000000  00000000  00058858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013386c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005148  00000000  00000000  001338b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001389f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a8 	.word	0x080073a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080073a8 	.word	0x080073a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <inverse_kinematics>:
    p.orientation = a.theta4;  // Orientación del efector (independiente)

    return p;
}

Angles inverse_kinematics(Position p, float desired_orientation) {
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	ed2d 8b02 	vpush	{d8}
 8000d86:	b099      	sub	sp, #100	@ 0x64
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	eeb0 6a40 	vmov.f32	s12, s0
 8000d8e:	eef0 6a60 	vmov.f32	s13, s1
 8000d92:	eeb0 7a41 	vmov.f32	s14, s2
 8000d96:	eef0 7a61 	vmov.f32	s15, s3
 8000d9a:	ed87 2a05 	vstr	s4, [r7, #20]
 8000d9e:	ed87 6a06 	vstr	s12, [r7, #24]
 8000da2:	edc7 6a07 	vstr	s13, [r7, #28]
 8000da6:	ed87 7a08 	vstr	s14, [r7, #32]
 8000daa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    Angles a;

    // θ1: rotación base
    a.theta1 = RAD2DEG(atan2f(p.y, p.x));
 8000dae:	edd7 7a07 	vldr	s15, [r7, #28]
 8000db2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000db6:	eef0 0a47 	vmov.f32	s1, s14
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	f005 fbe7 	bl	8006590 <atan2f>
 8000dc2:	eef0 7a40 	vmov.f32	s15, s0
 8000dc6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8000fb8 <inverse_kinematics+0x238>
 8000dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dce:	ee17 0a90 	vmov	r0, s15
 8000dd2:	f7ff fb5d 	bl	8000490 <__aeabi_f2d>
 8000dd6:	a376      	add	r3, pc, #472	@ (adr r3, 8000fb0 <inverse_kinematics+0x230>)
 8000dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ddc:	f7ff fcda 	bl	8000794 <__aeabi_ddiv>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fde4 	bl	80009b4 <__aeabi_d2f>
 8000dec:	4603      	mov	r3, r0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28

    float r = sqrtf(p.x * p.x + p.y * p.y);
 8000df0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e00:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	f005 fbc0 	bl	8006594 <sqrtf>
 8000e14:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    float z = p.z - L1;
 8000e18:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e1c:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8000e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e24:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Ley del coseno para θ3
    float D = (r*r + z*z - L2*L2 - L3*L3) / (2 * L2 * L3);
 8000e28:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000e2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e30:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000e34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8000fbc <inverse_kinematics+0x23c>
 8000e40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e44:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000fbc <inverse_kinematics+0x23c>
 8000e48:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e4c:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8000fc0 <inverse_kinematics+0x240>
 8000e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e54:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    if (D > 1.0f) D = 1.0f;
 8000e58:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	dd02      	ble.n	8000e70 <inverse_kinematics+0xf0>
 8000e6a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (D < -1.0f) D = -1.0f;
 8000e70:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000e74:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	d501      	bpl.n	8000e86 <inverse_kinematics+0x106>
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <inverse_kinematics+0x244>)
 8000e84:	65fb      	str	r3, [r7, #92]	@ 0x5c

    float theta3_rad = atan2f(sqrtf(1 - D*D), D);
 8000e86:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	f005 fb7b 	bl	8006594 <sqrtf>
 8000e9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ea2:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 8000ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eaa:	f005 fb71 	bl	8006590 <atan2f>
 8000eae:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
    a.theta3 = RAD2DEG(theta3_rad);
 8000eb2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000eb6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000fb8 <inverse_kinematics+0x238>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	ee17 0a90 	vmov	r0, s15
 8000ec2:	f7ff fae5 	bl	8000490 <__aeabi_f2d>
 8000ec6:	a33a      	add	r3, pc, #232	@ (adr r3, 8000fb0 <inverse_kinematics+0x230>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fc62 	bl	8000794 <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fd6c 	bl	80009b4 <__aeabi_d2f>
 8000edc:	4603      	mov	r3, r0
 8000ede:	633b      	str	r3, [r7, #48]	@ 0x30

    // θ2: ángulo del primer brazo
    float phi = atan2f(z, r);
 8000ee0:	edd7 0a16 	vldr	s1, [r7, #88]	@ 0x58
 8000ee4:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8000ee8:	f005 fb52 	bl	8006590 <atan2f>
 8000eec:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float beta = atan2f(L3 * sinf(theta3_rad), L2 + L3 * cosf(theta3_rad));
 8000ef0:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8000ef4:	f005 fbb0 	bl	8006658 <sinf>
 8000ef8:	eef0 7a40 	vmov.f32	s15, s0
 8000efc:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8000f00:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000f04:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8000f08:	f005 fb62 	bl	80065d0 <cosf>
 8000f0c:	eef0 7a40 	vmov.f32	s15, s0
 8000f10:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8000f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f18:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8000f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f20:	eef0 0a67 	vmov.f32	s1, s15
 8000f24:	eeb0 0a48 	vmov.f32	s0, s16
 8000f28:	f005 fb32 	bl	8006590 <atan2f>
 8000f2c:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    a.theta2 = RAD2DEG(phi - beta);
 8000f30:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000f34:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000fb8 <inverse_kinematics+0x238>
 8000f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f44:	ee17 0a90 	vmov	r0, s15
 8000f48:	f7ff faa2 	bl	8000490 <__aeabi_f2d>
 8000f4c:	a318      	add	r3, pc, #96	@ (adr r3, 8000fb0 <inverse_kinematics+0x230>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fc1f 	bl	8000794 <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff fd29 	bl	80009b4 <__aeabi_d2f>
 8000f62:	4603      	mov	r3, r0
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // θ4: orientación deseada del efector (libre)
    a.theta4 = desired_orientation;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34

    return a;
 8000f6a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000f7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000f7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f80:	ee06 0a10 	vmov	s12, r0
 8000f84:	ee06 1a90 	vmov	s13, r1
 8000f88:	ee07 2a10 	vmov	s14, r2
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a46 	vmov.f32	s0, s12
 8000f94:	eef0 0a66 	vmov.f32	s1, s13
 8000f98:	eeb0 1a47 	vmov.f32	s2, s14
 8000f9c:	eef0 1a67 	vmov.f32	s3, s15
 8000fa0:	3764      	adds	r7, #100	@ 0x64
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	ecbd 8b02 	vpop	{d8}
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	f3af 8000 	nop.w
 8000fb0:	54442d18 	.word	0x54442d18
 8000fb4:	400921fb 	.word	0x400921fb
 8000fb8:	43340000 	.word	0x43340000
 8000fbc:	43100000 	.word	0x43100000
 8000fc0:	43900000 	.word	0x43900000
 8000fc4:	bf800000 	.word	0xbf800000

08000fc8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	2364      	movs	r3, #100	@ 0x64
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2304      	movs	r3, #4
 8001012:	214e      	movs	r1, #78	@ 0x4e
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <lcd_send_cmd+0x5c>)
 8001016:	f002 fcff 	bl	8003a18 <HAL_I2C_Master_Transmit>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000e0 	.word	0x200000e0

08001028 <lcd_init>:
	    HAL_Delay(100);
}


void lcd_init (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800102c:	2032      	movs	r0, #50	@ 0x32
 800102e:	f001 faf9 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001032:	2030      	movs	r0, #48	@ 0x30
 8001034:	f7ff ffc8 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001038:	2005      	movs	r0, #5
 800103a:	f001 faf3 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x30);
 800103e:	2030      	movs	r0, #48	@ 0x30
 8001040:	f7ff ffc2 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001044:	2001      	movs	r0, #1
 8001046:	f001 faed 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x30);
 800104a:	2030      	movs	r0, #48	@ 0x30
 800104c:	f7ff ffbc 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 fae7 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001056:	2020      	movs	r0, #32
 8001058:	f7ff ffb6 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 800105c:	200a      	movs	r0, #10
 800105e:	f001 fae1 	bl	8002624 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001062:	2028      	movs	r0, #40	@ 0x28
 8001064:	f7ff ffb0 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f001 fadb 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800106e:	2008      	movs	r0, #8
 8001070:	f7ff ffaa 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f001 fad5 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff ffa4 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 facf 	bl	8002624 <HAL_Delay>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f001 facc 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800108c:	2006      	movs	r0, #6
 800108e:	f7ff ff9b 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f001 fac6 	bl	8002624 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001098:	200c      	movs	r0, #12
 800109a:	f7ff ff95 	bl	8000fc8 <lcd_send_cmd>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_UART_RxCpltCallback>:
volatile uint8_t angle_ready = 0;
volatile uint8_t moving = 0;
volatile float angle_difference = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

	static uint8_t index = 0; // Posición en el buffer
	static char readChar;
	if (UartHandle->Instance == USART6) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <HAL_UART_RxCpltCallback+0x64>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d124      	bne.n	8001100 <HAL_UART_RxCpltCallback+0x5c>
		HAL_UART_Receive_IT(&huart6, (uint8_t *)&readChar, 1); // Recibir próximo carácter
 80010b6:	2201      	movs	r2, #1
 80010b8:	4914      	ldr	r1, [pc, #80]	@ (800110c <HAL_UART_RxCpltCallback+0x68>)
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <HAL_UART_RxCpltCallback+0x6c>)
 80010bc:	f004 fb12 	bl	80056e4 <HAL_UART_Receive_IT>

		if (readChar == '%') { // Indicador de fin de mensaje
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_UART_RxCpltCallback+0x68>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b25      	cmp	r3, #37	@ 0x25
 80010c6:	d10c      	bne.n	80010e2 <HAL_UART_RxCpltCallback+0x3e>
			readBuf[index] = '\0'; // Terminar el string
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_UART_RxCpltCallback+0x70>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_UART_RxCpltCallback+0x74>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	5499      	strb	r1, [r3, r2]
			flag = 1;              // Indicar que el mensaje está listo
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_UART_RxCpltCallback+0x78>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
			index = 0;             // Reiniciar el índice
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_UART_RxCpltCallback+0x70>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
		} else if (index < BUFFERSIZE - 1) {
			readBuf[index++] = readChar; // Guardar carácter en el buffer
		}
	}
}
 80010e0:	e00e      	b.n	8001100 <HAL_UART_RxCpltCallback+0x5c>
		} else if (index < BUFFERSIZE - 1) {
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_UART_RxCpltCallback+0x70>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d80a      	bhi.n	8001100 <HAL_UART_RxCpltCallback+0x5c>
			readBuf[index++] = readChar; // Guardar carácter en el buffer
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_UART_RxCpltCallback+0x70>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	b2d1      	uxtb	r1, r2
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_UART_RxCpltCallback+0x70>)
 80010f4:	7011      	strb	r1, [r2, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HAL_UART_RxCpltCallback+0x68>)
 80010fa:	7819      	ldrb	r1, [r3, #0]
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_UART_RxCpltCallback+0x74>)
 80010fe:	5499      	strb	r1, [r3, r2]
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40011400 	.word	0x40011400
 800110c:	200002f4 	.word	0x200002f4
 8001110:	20000254 	.word	0x20000254
 8001114:	200002f5 	.word	0x200002f5
 8001118:	200002dc 	.word	0x200002dc
 800111c:	200002e0 	.word	0x200002e0

08001120 <set_stepper>:
	// 	Por ejemplo: recogiendo arena o descargando arena. Se decidirá posteriormente
	lcd_enviar("Voltaje:",0,0);
	lcd_enviar("Intensidad:",1,0);
}

void set_stepper(void){ //Para ajustar a 1/16 de paso
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);   // HIGH
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <set_stepper+0x2c>)
 800112c:	f002 fb16 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);   // HIGH
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <set_stepper+0x2c>)
 8001138:	f002 fb10 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // HIGH
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001142:	4803      	ldr	r0, [pc, #12]	@ (8001150 <set_stepper+0x30>)
 8001144:	f002 fb0a 	bl	800375c <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40020400 	.word	0x40020400

08001154 <step_once>:

void step_once(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // STEP HIGH
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <step_once+0x2c>)
 8001160:	f002 fafc 	bl	800375c <HAL_GPIO_WritePin>
    HAL_Delay(1);                                          // 1 ms (ajustable)
 8001164:	2001      	movs	r0, #1
 8001166:	f001 fa5d 	bl	8002624 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // STEP LOW
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <step_once+0x2c>)
 8001172:	f002 faf3 	bl	800375c <HAL_GPIO_WritePin>
    HAL_Delay(1);                                          // Delay entre pasos
 8001176:	2001      	movs	r0, #1
 8001178:	f001 fa54 	bl	8002624 <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020c00 	.word	0x40020c00
 8001184:	00000000 	.word	0x00000000

08001188 <move_stepper_degrees>:

void move_stepper_degrees(float angle, uint8_t dir) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
    int steps = (int)((angle / 360.0) * 3200 * 91.0/35.0);  // calcular pasos
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f97a 	bl	8000490 <__aeabi_f2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <move_stepper_degrees+0xa8>)
 80011a2:	f7ff faf7 	bl	8000794 <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <move_stepper_degrees+0xac>)
 80011b4:	f7ff f9c4 	bl	8000540 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	a319      	add	r3, pc, #100	@ (adr r3, 8001228 <move_stepper_degrees+0xa0>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff f9bb 	bl	8000540 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <move_stepper_degrees+0xb0>)
 80011d8:	f7ff fadc 	bl	8000794 <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fbbe 	bl	8000964 <__aeabi_d2iz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, dir); // Dirección: 0 = CW, 1 = CCW
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011f4:	4811      	ldr	r0, [pc, #68]	@ (800123c <move_stepper_degrees+0xb4>)
 80011f6:	f002 fab1 	bl	800375c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // ENABLE_N: LOW para habilitar
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001200:	480e      	ldr	r0, [pc, #56]	@ (800123c <move_stepper_degrees+0xb4>)
 8001202:	f002 faab 	bl	800375c <HAL_GPIO_WritePin>

    for (int i = 0; i < steps; i++) {
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e004      	b.n	8001216 <move_stepper_degrees+0x8e>
        step_once();
 800120c:	f7ff ffa2 	bl	8001154 <step_once>
    for (int i = 0; i < steps; i++) {
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbf6      	blt.n	800120c <move_stepper_degrees+0x84>
    }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	00000000 	.word	0x00000000
 800122c:	4056c000 	.word	0x4056c000
 8001230:	40768000 	.word	0x40768000
 8001234:	40a90000 	.word	0x40a90000
 8001238:	40418000 	.word	0x40418000
 800123c:	40020c00 	.word	0x40020c00

08001240 <strtoint>:

int strtoint(char readBuf[]) {
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
    int angle = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]

    // Iteración hasta encontrar el final de la cadena
    while (readBuf[i] != '\0' || readBuf[i] != '\000') {  // Finaliza al llegar a '\0' o '\000'
 8001250:	e01b      	b.n	800128a <strtoint+0x4a>

		// Solo se procesan los caracteres numéricos
			if (readBuf[i] >= '0' && readBuf[i] <= '9') {
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b2f      	cmp	r3, #47	@ 0x2f
 800125c:	d912      	bls.n	8001284 <strtoint+0x44>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b39      	cmp	r3, #57	@ 0x39
 8001268:	d80c      	bhi.n	8001284 <strtoint+0x44>
				angle = angle * 10 + (readBuf[i] - '0');
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4619      	mov	r1, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3b30      	subs	r3, #48	@ 0x30
 8001280:	440b      	add	r3, r1
 8001282:	60bb      	str	r3, [r7, #8]
			}

        i++;  // Se avanza al siguiente carácter
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
    while (readBuf[i] != '\0' || readBuf[i] != '\000') {  // Finaliza al llegar a '\0' o '\000'
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1dd      	bne.n	8001252 <strtoint+0x12>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1d7      	bne.n	8001252 <strtoint+0x12>
    }

    return angle;
 80012a2:	68bb      	ldr	r3, [r7, #8]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <BluetoothManager>:


void BluetoothManager()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	float angle_aux = 0;
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]

	if (flag) { // Si hay un mensaje recibido
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <BluetoothManager+0x68>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d024      	beq.n	8001310 <BluetoothManager+0x60>

		flag = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <BluetoothManager+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

		if(!moving)
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <BluetoothManager+0x6c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d11c      	bne.n	8001310 <BluetoothManager+0x60>
		{
			if((angle_aux = strtoint(readBuf)) != angle){
 80012d6:	4812      	ldr	r0, [pc, #72]	@ (8001320 <BluetoothManager+0x70>)
 80012d8:	f7ff ffb2 	bl	8001240 <strtoint>
 80012dc:	ee07 0a90 	vmov	s15, r0
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <BluetoothManager+0x74>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d009      	beq.n	8001310 <BluetoothManager+0x60>
				angle_buf = angle;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <BluetoothManager+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <BluetoothManager+0x78>)
 8001302:	6013      	str	r3, [r2, #0]
				angle = angle_aux;
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <BluetoothManager+0x74>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
				angle_ready = 1;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <BluetoothManager+0x7c>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
//			  else if (strcmp(readBuf, "60") == 0) {
//				  move_stepper_degrees(strtof(readBuf,NULL),1);
//			  			  }
//			  memset(readBuf, 0, sizeof(readBuf)); // Resetear el buffer una vez gestionada la flag
	         }
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200002e0 	.word	0x200002e0
 800131c:	200002ed 	.word	0x200002ed
 8001320:	200002dc 	.word	0x200002dc
 8001324:	200002e4 	.word	0x200002e4
 8001328:	200002e8 	.word	0x200002e8
 800132c:	200002ec 	.word	0x200002ec

08001330 <ReadADC>:

void ReadADC(ADC_HandleTypeDef *hadc, volatile uint32_t *variable){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]

	HAL_ADC_Start(&hadc1);
 800133a:	480a      	ldr	r0, [pc, #40]	@ (8001364 <ReadADC+0x34>)
 800133c:	f001 f9da 	bl	80026f4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	4807      	ldr	r0, [pc, #28]	@ (8001364 <ReadADC+0x34>)
 8001346:	f001 fada 	bl	80028fe <HAL_ADC_PollForConversion>
	*variable=HAL_ADC_GetValue(&hadc1);
 800134a:	4806      	ldr	r0, [pc, #24]	@ (8001364 <ReadADC+0x34>)
 800134c:	f001 fc72 	bl	8002c34 <HAL_ADC_GetValue>
 8001350:	4602      	mov	r2, r0
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8001356:	4803      	ldr	r0, [pc, #12]	@ (8001364 <ReadADC+0x34>)
 8001358:	f001 fa9e 	bl	8002898 <HAL_ADC_Stop>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000098 	.word	0x20000098

08001368 <Change_DigVolt>:

void Change_GradosVolt(uint32_t *Posicion){
	lectura1_volt=(3.3f *(*Posicion))/240.0f;
}

void Change_DigVolt(volatile uint32_t *adc_val, volatile  uint32_t *lectura){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	*lectura=(3.3f*(float)(*adc_val))/4095.0f;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013a8 <Change_DigVolt+0x40>
 8001382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001386:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80013ac <Change_DigVolt+0x44>
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40533333 	.word	0x40533333
 80013ac:	457ff000 	.word	0x457ff000

080013b0 <ControlPD>:

void ControlPD(volatile float setpoint,volatile float medida, volatile float *error,
		volatile float *derivada,volatile float *salida, volatile float *error_previo,uint8_t Motor){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80013ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]

	*error=setpoint-medida;
 80013c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	*derivada=(*error- *error_previo)/dt;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001594 <ControlPD+0x1e4>)
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	edc3 7a00 	vstr	s15, [r3]

	if (Motor==1){
 80013f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d15e      	bne.n	80014be <ControlPD+0x10e>

		*salida =Kp1 * *error + Kd1 * *derivada;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	4b64      	ldr	r3, [pc, #400]	@ (8001598 <ControlPD+0x1e8>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	edd3 6a00 	vldr	s13, [r3]
 8001416:	4b61      	ldr	r3, [pc, #388]	@ (800159c <ControlPD+0x1ec>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edc3 7a00 	vstr	s15, [r3]

		if (*salida > 0){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dd0c      	ble.n	8001454 <ControlPD+0xa4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001440:	4857      	ldr	r0, [pc, #348]	@ (80015a0 <ControlPD+0x1f0>)
 8001442:	f002 f98b 	bl	800375c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800144c:	4854      	ldr	r0, [pc, #336]	@ (80015a0 <ControlPD+0x1f0>)
 800144e:	f002 f985 	bl	800375c <HAL_GPIO_WritePin>
 8001452:	e034      	b.n	80014be <ControlPD+0x10e>
		} else {
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800145a:	4851      	ldr	r0, [pc, #324]	@ (80015a0 <ControlPD+0x1f0>)
 800145c:	f002 f97e 	bl	800375c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001466:	484e      	ldr	r0, [pc, #312]	@ (80015a0 <ControlPD+0x1f0>)
 8001468:	f002 f978 	bl	800375c <HAL_GPIO_WritePin>
			*salida= -*salida;  //Hacer PWM positivo
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	eef1 7a67 	vneg.f32	s15, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edc3 7a00 	vstr	s15, [r3]
			if(*salida >1.0f) *salida=1.0f;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd03      	ble.n	8001498 <ControlPD+0xe8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001496:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, *salida *PWM_MAX);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <ControlPD+0x1f4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	4b3c      	ldr	r3, [pc, #240]	@ (80015a4 <ControlPD+0x1f4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b8:	ee17 2a90 	vmov	r2, s15
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
		}}

	if (Motor==2){
 80014be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d15e      	bne.n	8001584 <ControlPD+0x1d4>

			*salida =Kp2 * *error + Kd2 * *derivada;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <ControlPD+0x1f8>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	edd3 6a00 	vldr	s13, [r3]
 80014dc:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <ControlPD+0x1fc>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edc3 7a00 	vstr	s15, [r3]

			if (*salida > 0){
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	dd0c      	ble.n	800151a <ControlPD+0x16a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001506:	4826      	ldr	r0, [pc, #152]	@ (80015a0 <ControlPD+0x1f0>)
 8001508:	f002 f928 	bl	800375c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001512:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <ControlPD+0x1f0>)
 8001514:	f002 f922 	bl	800375c <HAL_GPIO_WritePin>
 8001518:	e034      	b.n	8001584 <ControlPD+0x1d4>
			} else {
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001520:	481f      	ldr	r0, [pc, #124]	@ (80015a0 <ControlPD+0x1f0>)
 8001522:	f002 f91b 	bl	800375c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152c:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <ControlPD+0x1f0>)
 800152e:	f002 f915 	bl	800375c <HAL_GPIO_WritePin>
				*salida= -*salida;  //Hacer PWM positivo
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	eef1 7a67 	vneg.f32	s15, s15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edc3 7a00 	vstr	s15, [r3]
				if(*salida >1.0f) *salida=1.0f;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd03      	ble.n	800155e <ControlPD+0x1ae>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800155c:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, *salida *PWM_MAX);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <ControlPD+0x1f4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <ControlPD+0x200>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157e:	ee17 2a90 	vmov	r2, s15
 8001582:	635a      	str	r2, [r3, #52]	@ 0x34
			}}
	*error_previo= *error;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]

	}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000014 	.word	0x20000014
 8001598:	20000018 	.word	0x20000018
 800159c:	200002d4 	.word	0x200002d4
 80015a0:	40020000 	.word	0x40020000
 80015a4:	20000134 	.word	0x20000134
 80015a8:	2000001c 	.word	0x2000001c
 80015ac:	200002d8 	.word	0x200002d8
 80015b0:	2000017c 	.word	0x2000017c

080015b4 <FeedBackMotor>:


void FeedBackMotor(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af02      	add	r7, sp, #8

	ReadADC(&hadc1,&lectura1_adc);
 80015ba:	491e      	ldr	r1, [pc, #120]	@ (8001634 <FeedBackMotor+0x80>)
 80015bc:	481e      	ldr	r0, [pc, #120]	@ (8001638 <FeedBackMotor+0x84>)
 80015be:	f7ff feb7 	bl	8001330 <ReadADC>
	ReadADC(&hadc1,&lectura2_adc);
 80015c2:	491e      	ldr	r1, [pc, #120]	@ (800163c <FeedBackMotor+0x88>)
 80015c4:	481c      	ldr	r0, [pc, #112]	@ (8001638 <FeedBackMotor+0x84>)
 80015c6:	f7ff feb3 	bl	8001330 <ReadADC>

	Change_DigVolt(&lectura1_adc, &lectura1_volt);
 80015ca:	491d      	ldr	r1, [pc, #116]	@ (8001640 <FeedBackMotor+0x8c>)
 80015cc:	4819      	ldr	r0, [pc, #100]	@ (8001634 <FeedBackMotor+0x80>)
 80015ce:	f7ff fecb 	bl	8001368 <Change_DigVolt>
	Change_DigVolt(&lectura2_adc, &lectura2_volt);
 80015d2:	491c      	ldr	r1, [pc, #112]	@ (8001644 <FeedBackMotor+0x90>)
 80015d4:	4819      	ldr	r0, [pc, #100]	@ (800163c <FeedBackMotor+0x88>)
 80015d6:	f7ff fec7 	bl	8001368 <Change_DigVolt>

	ControlPD(Posicion_deseada_motor_1,lectura1_volt,&error1,&derivada1,&salida1,&error_previo1,1);
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <FeedBackMotor+0x94>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <FeedBackMotor+0x8c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	ee07 3a10 	vmov	s14, r3
 80015e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015ec:	2301      	movs	r3, #1
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <FeedBackMotor+0x98>)
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <FeedBackMotor+0x9c>)
 80015f4:	4917      	ldr	r1, [pc, #92]	@ (8001654 <FeedBackMotor+0xa0>)
 80015f6:	4818      	ldr	r0, [pc, #96]	@ (8001658 <FeedBackMotor+0xa4>)
 80015f8:	eef0 0a47 	vmov.f32	s1, s14
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	f7ff fed6 	bl	80013b0 <ControlPD>
	ControlPD(Posicion_deseada_motor_2,lectura2_volt,&error2,&derivada2,&salida2,&error_previo2,2);
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <FeedBackMotor+0xa8>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <FeedBackMotor+0x90>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	ee07 3a10 	vmov	s14, r3
 8001612:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001616:	2302      	movs	r3, #2
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <FeedBackMotor+0xac>)
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <FeedBackMotor+0xb0>)
 800161e:	4912      	ldr	r1, [pc, #72]	@ (8001668 <FeedBackMotor+0xb4>)
 8001620:	4812      	ldr	r0, [pc, #72]	@ (800166c <FeedBackMotor+0xb8>)
 8001622:	eef0 0a47 	vmov.f32	s1, s14
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	f7ff fec1 	bl	80013b0 <ControlPD>
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000029c 	.word	0x2000029c
 8001638:	20000098 	.word	0x20000098
 800163c:	200002a4 	.word	0x200002a4
 8001640:	200002a0 	.word	0x200002a0
 8001644:	200002a8 	.word	0x200002a8
 8001648:	200002cc 	.word	0x200002cc
 800164c:	200002b0 	.word	0x200002b0
 8001650:	200002b8 	.word	0x200002b8
 8001654:	200002b4 	.word	0x200002b4
 8001658:	200002ac 	.word	0x200002ac
 800165c:	200002d0 	.word	0x200002d0
 8001660:	200002c0 	.word	0x200002c0
 8001664:	200002c8 	.word	0x200002c8
 8001668:	200002c4 	.word	0x200002c4
 800166c:	200002bc 	.word	0x200002bc

08001670 <angle_to_pwm>:

uint16_t angle_to_pwm(float angle_deg, float min_deg, float max_deg, uint16_t pwm_min, uint16_t pwm_max) {
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	ed87 0a03 	vstr	s0, [r7, #12]
 800167a:	edc7 0a02 	vstr	s1, [r7, #8]
 800167e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	803b      	strh	r3, [r7, #0]
    if (angle_deg < min_deg) angle_deg = min_deg;
 800168c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001690:	edd7 7a02 	vldr	s15, [r7, #8]
 8001694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d501      	bpl.n	80016a2 <angle_to_pwm+0x32>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	60fb      	str	r3, [r7, #12]
    if (angle_deg > max_deg) angle_deg = max_deg;
 80016a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	dd01      	ble.n	80016b8 <angle_to_pwm+0x48>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
    return pwm_min + (uint16_t)((angle_deg - min_deg) * (pwm_max - pwm_min) / (max_deg - min_deg));
 80016b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c4:	883a      	ldrh	r2, [r7, #0]
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016da:	edd7 7a02 	vldr	s15, [r7, #8]
 80016de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <EjecutarCinematica>:

void EjecutarCinematica(Position posicion_deseada, float orientacion_deseada) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	eeb0 6a40 	vmov.f32	s12, s0
 800170e:	eef0 6a60 	vmov.f32	s13, s1
 8001712:	eeb0 7a41 	vmov.f32	s14, s2
 8001716:	eef0 7a61 	vmov.f32	s15, s3
 800171a:	ed87 2a01 	vstr	s4, [r7, #4]
 800171e:	ed87 6a02 	vstr	s12, [r7, #8]
 8001722:	edc7 6a03 	vstr	s13, [r7, #12]
 8001726:	ed87 7a04 	vstr	s14, [r7, #16]
 800172a:	edc7 7a05 	vstr	s15, [r7, #20]
    // Calcula los ángulos deseados usando cinemática inversa
    Angles a = inverse_kinematics(posicion_deseada, orientacion_deseada);
 800172e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001732:	edd7 6a03 	vldr	s13, [r7, #12]
 8001736:	ed97 7a04 	vldr	s14, [r7, #16]
 800173a:	edd7 7a05 	vldr	s15, [r7, #20]
 800173e:	ed97 2a01 	vldr	s4, [r7, #4]
 8001742:	eeb0 0a46 	vmov.f32	s0, s12
 8001746:	eef0 0a66 	vmov.f32	s1, s13
 800174a:	eeb0 1a47 	vmov.f32	s2, s14
 800174e:	eef0 1a67 	vmov.f32	s3, s15
 8001752:	f7ff fb15 	bl	8000d80 <inverse_kinematics>
 8001756:	eeb0 6a40 	vmov.f32	s12, s0
 800175a:	eef0 6a60 	vmov.f32	s13, s1
 800175e:	eeb0 7a41 	vmov.f32	s14, s2
 8001762:	eef0 7a61 	vmov.f32	s15, s3
 8001766:	ed87 6a07 	vstr	s12, [r7, #28]
 800176a:	edc7 6a08 	vstr	s13, [r7, #32]
 800176e:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001772:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // --- θ2: servo motor (hombro)
    uint16_t pwm_theta2 = angle_to_pwm(a.theta2, 0, 180, 500, 2500);
 8001776:	edd7 7a08 	vldr	s15, [r7, #32]
 800177a:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800177e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001782:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 80017e0 <EjecutarCinematica+0xdc>
 8001786:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80017e4 <EjecutarCinematica+0xe0>
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	f7ff ff6f 	bl	8001670 <angle_to_pwm>
 8001792:	4603      	mov	r3, r0
 8001794:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_theta2);
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <EjecutarCinematica+0xe4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800179c:	639a      	str	r2, [r3, #56]	@ 0x38

    // --- θ3: motor DC (codo)
    Posicion_deseada_motor_1 = (3.3f * a.theta3) / 240.0f;  // Ajusta si tu escala es distinta
 800179e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017a2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80017ec <EjecutarCinematica+0xe8>
 80017a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017aa:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80017f0 <EjecutarCinematica+0xec>
 80017ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <EjecutarCinematica+0xf0>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]

    // --- θ4: motor DC (efector)
    Posicion_deseada_motor_2 = (3.3f * a.theta4) / 240.0f;
 80017b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80017ec <EjecutarCinematica+0xe8>
 80017c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80017f0 <EjecutarCinematica+0xec>
 80017c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <EjecutarCinematica+0xf4>)
 80017ce:	edc3 7a00 	vstr	s15, [r3]

    // Ejecuta control PD en ambos motores DC
    FeedBackMotor();
 80017d2:	f7ff feef 	bl	80015b4 <FeedBackMotor>

}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	@ 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	43340000 	.word	0x43340000
 80017e4:	00000000 	.word	0x00000000
 80017e8:	2000017c 	.word	0x2000017c
 80017ec:	40533333 	.word	0x40533333
 80017f0:	43700000 	.word	0x43700000
 80017f4:	200002cc 	.word	0x200002cc
 80017f8:	200002d0 	.word	0x200002d0

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001800:	f000 fe9e 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001804:	f000 f87e 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001808:	f000 fb20 	bl	8001e4c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800180c:	f000 faf4 	bl	8001df8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001810:	f000 f962 	bl	8001ad8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001814:	f000 f9e4 	bl	8001be0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001818:	f000 fa3a 	bl	8001c90 <MX_TIM3_Init>
  MX_I2C1_Init();
 800181c:	f000 f92e 	bl	8001a7c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001820:	f000 fa90 	bl	8001d44 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001824:	f000 f8d8 	bl	80019d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001828:	f7ff fbfe 	bl	8001028 <lcd_init>
  set_stepper();
 800182c:	f7ff fc78 	bl	8001120 <set_stepper>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001830:	2100      	movs	r1, #0
 8001832:	482b      	ldr	r0, [pc, #172]	@ (80018e0 <main+0xe4>)
 8001834:	f003 f932 	bl	8004a9c <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart6, (uint8_t *)readBuf, 1); // Iniciar recepción
 8001838:	2201      	movs	r2, #1
 800183a:	492a      	ldr	r1, [pc, #168]	@ (80018e4 <main+0xe8>)
 800183c:	482a      	ldr	r0, [pc, #168]	@ (80018e8 <main+0xec>)
 800183e:	f003 ff51 	bl	80056e4 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  ParameterRegister();

	  BluetoothManager();
 8001842:	f7ff fd35 	bl	80012b0 <BluetoothManager>
	  if(angle_ready){
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <main+0xf0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d02e      	beq.n	80018ae <main+0xb2>

		  angle_ready = 0;
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <main+0xf0>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
		  angle_difference = angle-angle_buf;
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <main+0xf4>)
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <main+0xf8>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <main+0xfc>)
 8001868:	edc3 7a00 	vstr	s15, [r3]

		  if(angle >= angle_buf) {
 800186c:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <main+0xf4>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <main+0xf8>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	db08      	blt.n	8001894 <main+0x98>
		  		move_stepper_degrees(angle_difference, 1);
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <main+0xfc>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	2001      	movs	r0, #1
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	f7ff fc7b 	bl	8001188 <move_stepper_degrees>
 8001892:	e00c      	b.n	80018ae <main+0xb2>
			}

		else {
				move_stepper_degrees(angle_buf-angle, 0);
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <main+0xf8>)
 8001896:	ed93 7a00 	vldr	s14, [r3]
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <main+0xf4>)
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	2000      	movs	r0, #0
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	f7ff fc6d 	bl	8001188 <move_stepper_degrees>
			}

	  }

	  EjecutarCinematica(p, orientacion);
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <main+0x100>)
 80018b0:	edd3 5a00 	vldr	s11, [r3]
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <main+0x104>)
 80018b6:	ed93 6a00 	vldr	s12, [r3]
 80018ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80018be:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80018c6:	eeb0 2a65 	vmov.f32	s4, s11
 80018ca:	eeb0 0a46 	vmov.f32	s0, s12
 80018ce:	eef0 0a66 	vmov.f32	s1, s13
 80018d2:	eeb0 1a47 	vmov.f32	s2, s14
 80018d6:	eef0 1a67 	vmov.f32	s3, s15
 80018da:	f7ff ff13 	bl	8001704 <EjecutarCinematica>
	  BluetoothManager();
 80018de:	e7b0      	b.n	8001842 <main+0x46>
 80018e0:	2000017c 	.word	0x2000017c
 80018e4:	200002dc 	.word	0x200002dc
 80018e8:	20000254 	.word	0x20000254
 80018ec:	200002ec 	.word	0x200002ec
 80018f0:	200002e4 	.word	0x200002e4
 80018f4:	200002e8 	.word	0x200002e8
 80018f8:	200002f0 	.word	0x200002f0
 80018fc:	20000010 	.word	0x20000010
 8001900:	20000000 	.word	0x20000000

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	@ 0x50
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2230      	movs	r2, #48	@ 0x30
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fe0a 	bl	800652c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <SystemClock_Config+0xcc>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <SystemClock_Config+0xcc>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	@ 0x40
 8001938:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <SystemClock_Config+0xcc>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <SystemClock_Config+0xd0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <SystemClock_Config+0xd0>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <SystemClock_Config+0xd0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001960:	2302      	movs	r3, #2
 8001962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001964:	2301      	movs	r3, #1
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001968:	2310      	movs	r3, #16
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196c:	2302      	movs	r3, #2
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001970:	2300      	movs	r3, #0
 8001972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001974:	2308      	movs	r3, #8
 8001976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001978:	2332      	movs	r3, #50	@ 0x32
 800197a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800197c:	2304      	movs	r3, #4
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001980:	2307      	movs	r3, #7
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fb9f 	bl	80040cc <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001994:	f000 fb0c 	bl	8001fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001998:	230f      	movs	r3, #15
 800199a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199c:	2302      	movs	r3, #2
 800199e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80019a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fe00 	bl	80045bc <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019c2:	f000 faf5 	bl	8001fb0 <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3750      	adds	r7, #80	@ 0x50
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000

080019d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	463b      	mov	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ea:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <MX_ADC1_Init+0x98>)
 80019ec:	4a21      	ldr	r2, [pc, #132]	@ (8001a74 <MX_ADC1_Init+0x9c>)
 80019ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <MX_ADC1_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <MX_ADC1_Init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_ADC1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a02:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a18:	4a17      	ldr	r2, [pc, #92]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a22:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a36:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a38:	f000 fe18 	bl	800266c <HAL_ADC_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f000 fab5 	bl	8001fb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a46:	230a      	movs	r3, #10
 8001a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_ADC1_Init+0x98>)
 8001a58:	f001 f918 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a62:	f000 faa5 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000098 	.word	0x20000098
 8001a74:	40012000 	.word	0x40012000
 8001a78:	0f000001 	.word	0x0f000001

08001a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001a82:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <MX_I2C1_Init+0x54>)
 8001a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001a88:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <MX_I2C1_Init+0x58>)
 8001a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001a9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	@ (8001acc <MX_I2C1_Init+0x50>)
 8001aba:	f001 fe69 	bl	8003790 <HAL_I2C_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ac4:	f000 fa74 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000e0 	.word	0x200000e0
 8001ad0:	40005400 	.word	0x40005400
 8001ad4:	000186a0 	.word	0x000186a0

08001ad8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b092      	sub	sp, #72	@ 0x48
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2220      	movs	r2, #32
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f004 fd12 	bl	800652c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b08:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b0a:	4a34      	ldr	r2, [pc, #208]	@ (8001bdc <MX_TIM1_Init+0x104>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8001b0e:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b10:	229f      	movs	r2, #159	@ 0x9f
 8001b12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b30      	ldr	r3, [pc, #192]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b34:	4828      	ldr	r0, [pc, #160]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b36:	f003 f8c7 	bl	8004cc8 <HAL_TIM_PWM_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b40:	f000 fa36 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b50:	4619      	mov	r1, r3
 8001b52:	4821      	ldr	r0, [pc, #132]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b54:	f003 fca8 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b5e:	f000 fa27 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b62:	2360      	movs	r3, #96	@ 0x60
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4814      	ldr	r0, [pc, #80]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001b88:	f003 f94a 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b92:	f000 fa0d 	bl	8001fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001bba:	f003 fcf1 	bl	80055a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001bc4:	f000 f9f4 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bc8:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <MX_TIM1_Init+0x100>)
 8001bca:	f000 fb3d 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001bce:	bf00      	nop
 8001bd0:	3748      	adds	r7, #72	@ 0x48
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000134 	.word	0x20000134
 8001bdc:	40010000 	.word	0x40010000

08001be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c02:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c2a:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c2c:	f003 f84c 	bl	8004cc8 <HAL_TIM_PWM_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c36:	f000 f9bb 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	4619      	mov	r1, r3
 8001c48:	4810      	ldr	r0, [pc, #64]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c4a:	f003 fc2d 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c54:	f000 f9ac 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c58:	2360      	movs	r3, #96	@ 0x60
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c70:	f003 f8d6 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c7a:	f000 f999 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <MX_TIM2_Init+0xac>)
 8001c80:	f000 fae2 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	@ 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000017c 	.word	0x2000017c

08001c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cb4:	4a22      	ldr	r2, [pc, #136]	@ (8001d40 <MX_TIM3_Init+0xb0>)
 8001cb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cb8:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cd8:	4818      	ldr	r0, [pc, #96]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cda:	f002 fff5 	bl	8004cc8 <HAL_TIM_PWM_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ce4:	f000 f964 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf0:	f107 0320 	add.w	r3, r7, #32
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4811      	ldr	r0, [pc, #68]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001cf8:	f003 fbd6 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d02:	f000 f955 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d06:	2360      	movs	r3, #96	@ 0x60
 8001d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2208      	movs	r2, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001d1e:	f003 f87f 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d28:	f000 f942 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d2c:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM3_Init+0xac>)
 8001d2e:	f000 fa8b 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200001c4 	.word	0x200001c4
 8001d40:	40000400 	.word	0x40000400

08001d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	615a      	str	r2, [r3, #20]
 8001d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d66:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d68:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <MX_TIM4_Init+0xb0>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001d8c:	4818      	ldr	r0, [pc, #96]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001d8e:	f002 fe35 	bl	80049fc <HAL_TIM_OC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d98:	f000 f90a 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4619      	mov	r1, r3
 8001daa:	4811      	ldr	r0, [pc, #68]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001dac:	f003 fb7c 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001db6:	f000 f8fb 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001dd2:	f002 ffc9 	bl	8004d68 <HAL_TIM_OC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ddc:	f000 f8e8 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <MX_TIM4_Init+0xac>)
 8001de2:	f000 fa31 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	@ 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000020c 	.word	0x2000020c
 8001df4:	40000800 	.word	0x40000800

08001df8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <MX_USART6_UART_Init+0x50>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_USART6_UART_Init+0x4c>)
 8001e30:	f003 fc08 	bl	8005644 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e3a:	f000 f8b9 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000254 	.word	0x20000254
 8001e48:	40011400 	.word	0x40011400

08001e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b4d      	ldr	r3, [pc, #308]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b4a      	ldr	r3, [pc, #296]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b46      	ldr	r3, [pc, #280]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a45      	ldr	r2, [pc, #276]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b43      	ldr	r3, [pc, #268]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b38      	ldr	r3, [pc, #224]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a37      	ldr	r2, [pc, #220]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a30      	ldr	r2, [pc, #192]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <MX_GPIO_Init+0x150>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2128      	movs	r1, #40	@ 0x28
 8001ef2:	482b      	ldr	r0, [pc, #172]	@ (8001fa0 <MX_GPIO_Init+0x154>)
 8001ef4:	f001 fc32 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|MS3_Pin, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f248 0104 	movw	r1, #32772	@ 0x8004
 8001efe:	4829      	ldr	r0, [pc, #164]	@ (8001fa4 <MX_GPIO_Init+0x158>)
 8001f00:	f001 fc2c 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0a:	4827      	ldr	r0, [pc, #156]	@ (8001fa8 <MX_GPIO_Init+0x15c>)
 8001f0c:	f001 fc26 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MS2_Pin|MS1_Pin|ENABLE_N_Pin|DIR_Pin
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8001f16:	4825      	ldr	r0, [pc, #148]	@ (8001fac <MX_GPIO_Init+0x160>)
 8001f18:	f001 fc20 	bl	800375c <HAL_GPIO_WritePin>
                          |STEP_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001f1c:	2328      	movs	r3, #40	@ 0x28
 8001f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	481b      	ldr	r0, [pc, #108]	@ (8001fa0 <MX_GPIO_Init+0x154>)
 8001f34:	f001 fa76 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 MS3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|MS3_Pin;
 8001f38:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4814      	ldr	r0, [pc, #80]	@ (8001fa4 <MX_GPIO_Init+0x158>)
 8001f52:	f001 fa67 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480e      	ldr	r0, [pc, #56]	@ (8001fa8 <MX_GPIO_Init+0x15c>)
 8001f70:	f001 fa58 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS2_Pin MS1_Pin ENABLE_N_Pin DIR_Pin
                           STEP_Pin PD15 */
  GPIO_InitStruct.Pin = MS2_Pin|MS1_Pin|ENABLE_N_Pin|DIR_Pin
 8001f74:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8001f78:	617b      	str	r3, [r7, #20]
                          |STEP_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4807      	ldr	r0, [pc, #28]	@ (8001fac <MX_GPIO_Init+0x160>)
 8001f8e:	f001 fa49 	bl	8003424 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	@ 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40020c00 	.word	0x40020c00

08001fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb4:	b672      	cpsid	i
}
 8001fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <Error_Handler+0x8>

08001fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a0f      	ldr	r2, [pc, #60]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <HAL_MspInit+0x4c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ffa:	2007      	movs	r0, #7
 8001ffc:	f001 f93e 	bl	800327c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a28      	ldr	r2, [pc, #160]	@ (80020cc <HAL_ADC_MspInit+0xc0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d149      	bne.n	80020c2 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_ADC_MspInit+0xc4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002082:	230f      	movs	r3, #15
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002086:	2303      	movs	r3, #3
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	480f      	ldr	r0, [pc, #60]	@ (80020d4 <HAL_ADC_MspInit+0xc8>)
 8002096:	f001 f9c5 	bl	8003424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800209a:	2302      	movs	r3, #2
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209e:	2303      	movs	r3, #3
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480a      	ldr	r0, [pc, #40]	@ (80020d8 <HAL_ADC_MspInit+0xcc>)
 80020ae:	f001 f9b9 	bl	8003424 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2012      	movs	r0, #18
 80020b8:	f001 f8eb 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020bc:	2012      	movs	r0, #18
 80020be:	f001 f904 	bl	80032ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	@ 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40012000 	.word	0x40012000
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020000 	.word	0x40020000

080020dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	@ (8002160 <HAL_I2C_MspInit+0x84>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12c      	bne.n	8002158 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <HAL_I2C_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <HAL_I2C_MspInit+0x88>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_I2C_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800211a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002120:	2312      	movs	r3, #18
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212c:	2304      	movs	r3, #4
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	480c      	ldr	r0, [pc, #48]	@ (8002168 <HAL_I2C_MspInit+0x8c>)
 8002138:	f001 f974 	bl	8003424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_I2C_MspInit+0x88>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_I2C_MspInit+0x88>)
 8002146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_I2C_MspInit+0x88>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	@ 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40005400 	.word	0x40005400
 8002164:	40023800 	.word	0x40023800
 8002168:	40020400 	.word	0x40020400

0800216c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x8c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10e      	bne.n	800219c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6453      	str	r3, [r2, #68]	@ 0x44
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800219a:	e026      	b.n	80021ea <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
}
 80021c2:	e012      	b.n	80021ea <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_TIM_PWM_MspInit+0x94>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10d      	bne.n	80021ea <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <HAL_TIM_PWM_MspInit+0x90>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40023800 	.word	0x40023800
 8002200:	40000400 	.word	0x40000400

08002204 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_TIM_OC_MspInit+0x3c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10d      	bne.n	8002232 <HAL_TIM_OC_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_TIM_OC_MspInit+0x40>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <HAL_TIM_OC_MspInit+0x40>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6413      	str	r3, [r2, #64]	@ 0x40
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <HAL_TIM_OC_MspInit+0x40>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40000800 	.word	0x40000800
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	@ 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a48      	ldr	r2, [pc, #288]	@ (8002388 <HAL_TIM_MspPostInit+0x140>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d11f      	bne.n	80022aa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a46      	ldr	r2, [pc, #280]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002286:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002298:	2301      	movs	r3, #1
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	483b      	ldr	r0, [pc, #236]	@ (8002390 <HAL_TIM_MspPostInit+0x148>)
 80022a4:	f001 f8be 	bl	8003424 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022a8:	e06a      	b.n	8002380 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b2:	d11e      	bne.n	80022f2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	4b34      	ldr	r3, [pc, #208]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	4a33      	ldr	r2, [pc, #204]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c4:	4b31      	ldr	r3, [pc, #196]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022d0:	2308      	movs	r3, #8
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	482a      	ldr	r0, [pc, #168]	@ (8002394 <HAL_TIM_MspPostInit+0x14c>)
 80022ec:	f001 f89a 	bl	8003424 <HAL_GPIO_Init>
}
 80022f0:	e046      	b.n	8002380 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <HAL_TIM_MspPostInit+0x150>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d11e      	bne.n	800233a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	4a21      	ldr	r2, [pc, #132]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	6313      	str	r3, [r2, #48]	@ 0x30
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002318:	2301      	movs	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002328:	2302      	movs	r3, #2
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	4818      	ldr	r0, [pc, #96]	@ (8002394 <HAL_TIM_MspPostInit+0x14c>)
 8002334:	f001 f876 	bl	8003424 <HAL_GPIO_Init>
}
 8002338:	e022      	b.n	8002380 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a17      	ldr	r2, [pc, #92]	@ (800239c <HAL_TIM_MspPostInit+0x154>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d11d      	bne.n	8002380 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	4a0f      	ldr	r2, [pc, #60]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	6313      	str	r3, [r2, #48]	@ 0x30
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <HAL_TIM_MspPostInit+0x144>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002360:	2340      	movs	r3, #64	@ 0x40
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002370:	2302      	movs	r3, #2
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	@ (8002394 <HAL_TIM_MspPostInit+0x14c>)
 800237c:	f001 f852 	bl	8003424 <HAL_GPIO_Init>
}
 8002380:	bf00      	nop
 8002382:	3730      	adds	r7, #48	@ 0x30
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40010000 	.word	0x40010000
 800238c:	40023800 	.word	0x40023800
 8002390:	40021000 	.word	0x40021000
 8002394:	40020400 	.word	0x40020400
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <HAL_UART_MspInit+0x94>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d133      	bne.n	800242a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <HAL_UART_MspInit+0x98>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_UART_MspInit+0x98>)
 80023cc:	f043 0320 	orr.w	r3, r3, #32
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_UART_MspInit+0x98>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_UART_MspInit+0x98>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <HAL_UART_MspInit+0x98>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_UART_MspInit+0x98>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fa:	23c0      	movs	r3, #192	@ 0xc0
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800240a:	2308      	movs	r3, #8
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4809      	ldr	r0, [pc, #36]	@ (800243c <HAL_UART_MspInit+0x9c>)
 8002416:	f001 f805 	bl	8003424 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	2047      	movs	r0, #71	@ 0x47
 8002420:	f000 ff37 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002424:	2047      	movs	r0, #71	@ 0x47
 8002426:	f000 ff50 	bl	80032ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	@ 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40011400 	.word	0x40011400
 8002438:	40023800 	.word	0x40023800
 800243c:	40020800 	.word	0x40020800

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002496:	f000 f8a5 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <ADC_IRQHandler+0x10>)
 80024a6:	f000 fab5 	bl	8002a14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000098 	.word	0x20000098

080024b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <USART6_IRQHandler+0x10>)
 80024ba:	f003 f939 	bl	8005730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000254 	.word	0x20000254

080024c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <SystemInit+0x20>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <SystemInit+0x20>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002524 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024f0:	f7ff ffea 	bl	80024c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	@ (800252c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	@ (8002538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251a:	f004 f815 	bl	8006548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251e:	f7ff f96d 	bl	80017fc <main>
  bx  lr    
 8002522:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002530:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8002534:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002538:	20000434 	.word	0x20000434

0800253c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800253c:	e7fe      	b.n	800253c <CAN1_RX0_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002544:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0d      	ldr	r2, [pc, #52]	@ (8002580 <HAL_Init+0x40>)
 800254a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <HAL_Init+0x40>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800255a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <HAL_Init+0x40>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 fe87 	bl	800327c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	2000      	movs	r0, #0
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fd22 	bl	8001fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fe9f 	bl	80032e6 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f000 fe67 	bl	8003292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000020 	.word	0x20000020
 80025dc:	20000028 	.word	0x20000028
 80025e0:	20000024 	.word	0x20000024

080025e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000028 	.word	0x20000028
 8002608:	200002f8 	.word	0x200002f8

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200002f8 	.word	0x200002f8

08002624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_Delay+0x44>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffde 	bl	800260c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000028 	.word	0x20000028

0800266c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e033      	b.n	80026ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fcbe 	bl	800200c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fc06 	bl	8002ed0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80026da:	e001      	b.n	80026e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADC_Start+0x1a>
 800270a:	2302      	movs	r3, #2
 800270c:	e0b2      	b.n	8002874 <HAL_ADC_Start+0x180>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d018      	beq.n	8002756 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002734:	4b52      	ldr	r3, [pc, #328]	@ (8002880 <HAL_ADC_Start+0x18c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a52      	ldr	r2, [pc, #328]	@ (8002884 <HAL_ADC_Start+0x190>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0c9a      	lsrs	r2, r3, #18
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d17a      	bne.n	800285a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800278e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a8:	f023 0206 	bic.w	r2, r3, #6
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c0:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_ADC_Start+0x194>)
 80027c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d12a      	bne.n	8002830 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2b      	ldr	r2, [pc, #172]	@ (800288c <HAL_ADC_Start+0x198>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d015      	beq.n	8002810 <HAL_ADC_Start+0x11c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a29      	ldr	r2, [pc, #164]	@ (8002890 <HAL_ADC_Start+0x19c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d105      	bne.n	80027fa <HAL_ADC_Start+0x106>
 80027ee:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <HAL_ADC_Start+0x194>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a25      	ldr	r2, [pc, #148]	@ (8002894 <HAL_ADC_Start+0x1a0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d136      	bne.n	8002872 <HAL_ADC_Start+0x17e>
 8002804:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_ADC_Start+0x194>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d130      	bne.n	8002872 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d129      	bne.n	8002872 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	e020      	b.n	8002872 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a15      	ldr	r2, [pc, #84]	@ (800288c <HAL_ADC_Start+0x198>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11b      	bne.n	8002872 <HAL_ADC_Start+0x17e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d114      	bne.n	8002872 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e00b      	b.n	8002872 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f043 0210 	orr.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	20000020 	.word	0x20000020
 8002884:	431bde83 	.word	0x431bde83
 8002888:	40012300 	.word	0x40012300
 800288c:	40012000 	.word	0x40012000
 8002890:	40012100 	.word	0x40012100
 8002894:	40012200 	.word	0x40012200

08002898 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_Stop+0x16>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e021      	b.n	80028f2 <HAL_ADC_Stop+0x5a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291a:	d113      	bne.n	8002944 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800292a:	d10b      	bne.n	8002944 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e063      	b.n	8002a0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002944:	f7ff fe62 	bl	800260c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800294a:	e021      	b.n	8002990 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d01d      	beq.n	8002990 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_ADC_PollForConversion+0x6c>
 800295a:	f7ff fe57 	bl	800260c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d212      	bcs.n	8002990 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	d00b      	beq.n	8002990 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03d      	b.n	8002a0c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d1d6      	bne.n	800294c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f06f 0212 	mvn.w	r2, #18
 80029a6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d123      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11f      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d049      	beq.n	8002ade <HAL_ADC_IRQHandler+0xca>
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d046      	beq.n	8002ade <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12b      	bne.n	8002ace <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d127      	bne.n	8002ace <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d119      	bne.n	8002ace <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0220 	bic.w	r2, r2, #32
 8002aa8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8bd 	bl	8002c4e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0212 	mvn.w	r2, #18
 8002adc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d057      	beq.n	8002ba4 <HAL_ADC_IRQHandler+0x190>
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d054      	beq.n	8002ba4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d139      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d12b      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d124      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11d      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d119      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa97 	bl	80030c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 020c 	mvn.w	r2, #12
 8002ba2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d017      	beq.n	8002bea <HAL_ADC_IRQHandler+0x1d6>
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d014      	beq.n	8002bea <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10d      	bne.n	8002bea <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f841 	bl	8002c62 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0201 	mvn.w	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bf8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x218>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f043 0202 	orr.w	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0220 	mvn.w	r2, #32
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f82a 	bl	8002c76 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0220 	mvn.w	r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e105      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x228>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d925      	bls.n	8002d04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68d9      	ldr	r1, [r3, #12]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b1e      	subs	r3, #30
 8002cce:	2207      	movs	r2, #7
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	400a      	ands	r2, r1
 8002cdc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68d9      	ldr	r1, [r3, #12]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3b1e      	subs	r3, #30
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	e022      	b.n	8002d4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	2207      	movs	r2, #7
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	400a      	ands	r2, r1
 8002d26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6919      	ldr	r1, [r3, #16]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4403      	add	r3, r0
 8002d40:	409a      	lsls	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d824      	bhi.n	8002d9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3b05      	subs	r3, #5
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b05      	subs	r3, #5
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d9a:	e04c      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d824      	bhi.n	8002dee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	3b23      	subs	r3, #35	@ 0x23
 8002db6:	221f      	movs	r2, #31
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b23      	subs	r3, #35	@ 0x23
 8002de0:	fa00 f203 	lsl.w	r2, r0, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dec:	e023      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b41      	subs	r3, #65	@ 0x41
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b41      	subs	r3, #65	@ 0x41
 8002e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e36:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x234>)
 8002e38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x238>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d109      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b12      	cmp	r3, #18
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a19      	ldr	r2, [pc, #100]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x238>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d123      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d003      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x1e6>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b11      	cmp	r3, #17
 8002e70:	d11b      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d111      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x23c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <HAL_ADC_ConfigChannel+0x240>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	0c9a      	lsrs	r2, r3, #18
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e9c:	e002      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f9      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40012300 	.word	0x40012300
 8002ec4:	40012000 	.word	0x40012000
 8002ec8:	20000020 	.word	0x20000020
 8002ecc:	431bde83 	.word	0x431bde83

08002ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	4b79      	ldr	r3, [pc, #484]	@ (80030c0 <ADC_Init+0x1f0>)
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <ADC_Init+0x1f4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e00f      	b.n	8002fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0202 	bic.w	r2, r2, #2
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
 8002fe8:	005a      	lsls	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800301a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	3b01      	subs	r3, #1
 8003028:	035a      	lsls	r2, r3, #13
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e007      	b.n	8003044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	3b01      	subs	r3, #1
 8003060:	051a      	lsls	r2, r3, #20
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003086:	025a      	lsls	r2, r3, #9
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	029a      	lsls	r2, r3, #10
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012300 	.word	0x40012300
 80030c4:	0f000001 	.word	0x0f000001

080030c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030f8:	4013      	ands	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 0307 	and.w	r3, r3, #7
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4907      	ldr	r1, [pc, #28]	@ (8003178 <__NVIC_EnableIRQ+0x38>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000e100 	.word	0xe000e100

0800317c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	db0a      	blt.n	80031a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	490c      	ldr	r1, [pc, #48]	@ (80031c8 <__NVIC_SetPriority+0x4c>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a4:	e00a      	b.n	80031bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4908      	ldr	r1, [pc, #32]	@ (80031cc <__NVIC_SetPriority+0x50>)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3b04      	subs	r3, #4
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	440b      	add	r3, r1
 80031ba:	761a      	strb	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	@ 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf28      	it	cs
 80031ee:	2304      	movcs	r3, #4
 80031f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d902      	bls.n	8003200 <NVIC_EncodePriority+0x30>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b03      	subs	r3, #3
 80031fe:	e000      	b.n	8003202 <NVIC_EncodePriority+0x32>
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	401a      	ands	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003218:	f04f 31ff 	mov.w	r1, #4294967295
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43d9      	mvns	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	4313      	orrs	r3, r2
         );
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	@ 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003248:	d301      	bcc.n	800324e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324a:	2301      	movs	r3, #1
 800324c:	e00f      	b.n	800326e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324e:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <SysTick_Config+0x40>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003256:	210f      	movs	r1, #15
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	f7ff ff8e 	bl	800317c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <SysTick_Config+0x40>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003266:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <SysTick_Config+0x40>)
 8003268:	2207      	movs	r2, #7
 800326a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000e010 	.word	0xe000e010

0800327c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ff29 	bl	80030dc <__NVIC_SetPriorityGrouping>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a4:	f7ff ff3e 	bl	8003124 <__NVIC_GetPriorityGrouping>
 80032a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f7ff ff8e 	bl	80031d0 <NVIC_EncodePriority>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff5d 	bl	800317c <__NVIC_SetPriority>
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff31 	bl	8003140 <__NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffa2 	bl	8003238 <SysTick_Config>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff f97e 	bl	800260c <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d008      	beq.n	8003330 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e052      	b.n	80033d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0216 	bic.w	r2, r2, #22
 800333e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800334e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <HAL_DMA_Abort+0x62>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0208 	bic.w	r2, r2, #8
 800336e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003380:	e013      	b.n	80033aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003382:	f7ff f943 	bl	800260c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b05      	cmp	r3, #5
 800338e:	d90c      	bls.n	80033aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2203      	movs	r2, #3
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e015      	b.n	80033d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e4      	bne.n	8003382 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	223f      	movs	r2, #63	@ 0x3f
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	@ 0x80
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e00c      	b.n	8003416 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2205      	movs	r2, #5
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	@ 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e16b      	b.n	8003718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	f040 815a 	bne.w	8003712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d005      	beq.n	8003476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003472:	2b02      	cmp	r3, #2
 8003474:	d130      	bne.n	80034d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 0201 	and.w	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d017      	beq.n	8003514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d123      	bne.n	8003568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	08da      	lsrs	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3208      	adds	r2, #8
 8003528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	220f      	movs	r2, #15
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	08da      	lsrs	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3208      	adds	r2, #8
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0203 	and.w	r2, r3, #3
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80b4 	beq.w	8003712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b60      	ldr	r3, [pc, #384]	@ (8003730 <HAL_GPIO_Init+0x30c>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003730 <HAL_GPIO_Init+0x30c>)
 80035b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003730 <HAL_GPIO_Init+0x30c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003734 <HAL_GPIO_Init+0x310>)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	@ (8003738 <HAL_GPIO_Init+0x314>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02b      	beq.n	800364a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	@ (800373c <HAL_GPIO_Init+0x318>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d025      	beq.n	8003646 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	@ (8003740 <HAL_GPIO_Init+0x31c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	@ (8003744 <HAL_GPIO_Init+0x320>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x21a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4e      	ldr	r2, [pc, #312]	@ (8003748 <HAL_GPIO_Init+0x324>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x216>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4d      	ldr	r2, [pc, #308]	@ (800374c <HAL_GPIO_Init+0x328>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x212>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4c      	ldr	r2, [pc, #304]	@ (8003750 <HAL_GPIO_Init+0x32c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4b      	ldr	r2, [pc, #300]	@ (8003754 <HAL_GPIO_Init+0x330>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x20a>
 800362a:	2307      	movs	r3, #7
 800362c:	e00e      	b.n	800364c <HAL_GPIO_Init+0x228>
 800362e:	2308      	movs	r3, #8
 8003630:	e00c      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003632:	2306      	movs	r3, #6
 8003634:	e00a      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003636:	2305      	movs	r3, #5
 8003638:	e008      	b.n	800364c <HAL_GPIO_Init+0x228>
 800363a:	2304      	movs	r3, #4
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x228>
 800363e:	2303      	movs	r3, #3
 8003640:	e004      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003642:	2302      	movs	r3, #2
 8003644:	e002      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x228>
 800364a:	2300      	movs	r3, #0
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	f002 0203 	and.w	r2, r2, #3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4093      	lsls	r3, r2
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800365c:	4935      	ldr	r1, [pc, #212]	@ (8003734 <HAL_GPIO_Init+0x310>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366a:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_GPIO_Init+0x334>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800368e:	4a32      	ldr	r2, [pc, #200]	@ (8003758 <HAL_GPIO_Init+0x334>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003694:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <HAL_GPIO_Init+0x334>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b8:	4a27      	ldr	r2, [pc, #156]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036be:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_GPIO_Init+0x334>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800370c:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <HAL_GPIO_Init+0x334>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	f67f ae90 	bls.w	8003440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	@ 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40013800 	.word	0x40013800
 8003738:	40020000 	.word	0x40020000
 800373c:	40020400 	.word	0x40020400
 8003740:	40020800 	.word	0x40020800
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40021000 	.word	0x40021000
 800374c:	40021400 	.word	0x40021400
 8003750:	40021800 	.word	0x40021800
 8003754:	40021c00 	.word	0x40021c00
 8003758:	40013c00 	.word	0x40013c00

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003778:	e003      	b.n	8003782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e12b      	b.n	80039fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fe fc90 	bl	80020dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	@ 0x24
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f4:	f001 f8da 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 80037f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a81      	ldr	r2, [pc, #516]	@ (8003a04 <HAL_I2C_Init+0x274>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d807      	bhi.n	8003814 <HAL_I2C_Init+0x84>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a80      	ldr	r2, [pc, #512]	@ (8003a08 <HAL_I2C_Init+0x278>)
 8003808:	4293      	cmp	r3, r2
 800380a:	bf94      	ite	ls
 800380c:	2301      	movls	r3, #1
 800380e:	2300      	movhi	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e006      	b.n	8003822 <HAL_I2C_Init+0x92>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a7d      	ldr	r2, [pc, #500]	@ (8003a0c <HAL_I2C_Init+0x27c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	bf94      	ite	ls
 800381c:	2301      	movls	r3, #1
 800381e:	2300      	movhi	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0e7      	b.n	80039fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a78      	ldr	r2, [pc, #480]	@ (8003a10 <HAL_I2C_Init+0x280>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0c9b      	lsrs	r3, r3, #18
 8003834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a6a      	ldr	r2, [pc, #424]	@ (8003a04 <HAL_I2C_Init+0x274>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d802      	bhi.n	8003864 <HAL_I2C_Init+0xd4>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3301      	adds	r3, #1
 8003862:	e009      	b.n	8003878 <HAL_I2C_Init+0xe8>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	4a69      	ldr	r2, [pc, #420]	@ (8003a14 <HAL_I2C_Init+0x284>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	3301      	adds	r3, #1
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430b      	orrs	r3, r1
 800387e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800388a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	495c      	ldr	r1, [pc, #368]	@ (8003a04 <HAL_I2C_Init+0x274>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d819      	bhi.n	80038cc <HAL_I2C_Init+0x13c>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e59      	subs	r1, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038ac:	400b      	ands	r3, r1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_I2C_Init+0x138>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1e59      	subs	r1, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	e051      	b.n	800396c <HAL_I2C_Init+0x1dc>
 80038c8:	2304      	movs	r3, #4
 80038ca:	e04f      	b.n	800396c <HAL_I2C_Init+0x1dc>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d111      	bne.n	80038f8 <HAL_I2C_Init+0x168>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	440b      	add	r3, r1
 80038e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e012      	b.n	800391e <HAL_I2C_Init+0x18e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1e58      	subs	r0, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	0099      	lsls	r1, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	fbb0 f3f3 	udiv	r3, r0, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Init+0x196>
 8003922:	2301      	movs	r3, #1
 8003924:	e022      	b.n	800396c <HAL_I2C_Init+0x1dc>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10e      	bne.n	800394c <HAL_I2C_Init+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1e58      	subs	r0, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	440b      	add	r3, r1
 800393c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800394a:	e00f      	b.n	800396c <HAL_I2C_Init+0x1dc>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e58      	subs	r0, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	0099      	lsls	r1, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	6809      	ldr	r1, [r1, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800399a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6911      	ldr	r1, [r2, #16]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	000186a0 	.word	0x000186a0
 8003a08:	001e847f 	.word	0x001e847f
 8003a0c:	003d08ff 	.word	0x003d08ff
 8003a10:	431bde83 	.word	0x431bde83
 8003a14:	10624dd3 	.word	0x10624dd3

08003a18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	460b      	mov	r3, r1
 8003a26:	817b      	strh	r3, [r7, #10]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7fe fdee 	bl	800260c <HAL_GetTick>
 8003a30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	f040 80e0 	bne.w	8003c00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2319      	movs	r3, #25
 8003a46:	2201      	movs	r2, #1
 8003a48:	4970      	ldr	r1, [pc, #448]	@ (8003c0c <HAL_I2C_Master_Transmit+0x1f4>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f964 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0d3      	b.n	8003c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_Master_Transmit+0x50>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0cc      	b.n	8003c02 <HAL_I2C_Master_Transmit+0x1ea>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d007      	beq.n	8003a8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2221      	movs	r2, #33	@ 0x21
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a50      	ldr	r2, [pc, #320]	@ (8003c10 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6a3a      	ldr	r2, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f89c 	bl	8003c14 <I2C_MasterRequestWrite>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e08d      	b.n	8003c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003afc:	e066      	b.n	8003bcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	6a39      	ldr	r1, [r7, #32]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa22 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06b      	b.n	8003c02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d11b      	bne.n	8003ba0 <HAL_I2C_Master_Transmit+0x188>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	6a39      	ldr	r1, [r7, #32]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa19 	bl	8003fdc <I2C_WaitOnBTFFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d107      	bne.n	8003bc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01a      	b.n	8003c02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d194      	bne.n	8003afe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	00100002 	.word	0x00100002
 8003c10:	ffff0000 	.word	0xffff0000

08003c14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	460b      	mov	r3, r1
 8003c22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d006      	beq.n	8003c3e <I2C_MasterRequestWrite+0x2a>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d003      	beq.n	8003c3e <I2C_MasterRequestWrite+0x2a>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c3c:	d108      	bne.n	8003c50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e00b      	b.n	8003c68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	2b12      	cmp	r3, #18
 8003c56:	d107      	bne.n	8003c68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f84f 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8e:	d103      	bne.n	8003c98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e035      	b.n	8003d08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca4:	d108      	bne.n	8003cb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cb4:	611a      	str	r2, [r3, #16]
 8003cb6:	e01b      	b.n	8003cf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	11db      	asrs	r3, r3, #7
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f063 030f 	orn	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	490e      	ldr	r1, [pc, #56]	@ (8003d10 <I2C_MasterRequestWrite+0xfc>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f898 	bl	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e010      	b.n	8003d08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ce6:	897b      	ldrh	r3, [r7, #10]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4907      	ldr	r1, [pc, #28]	@ (8003d14 <I2C_MasterRequestWrite+0x100>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f888 	bl	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	00010008 	.word	0x00010008
 8003d14:	00010002 	.word	0x00010002

08003d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d28:	e048      	b.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d044      	beq.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fe fc6b 	bl	800260c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d139      	bne.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10d      	bne.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	43da      	mvns	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	e00c      	b.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d116      	bne.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e023      	b.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10d      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	e00c      	b.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	43da      	mvns	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d093      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e1a:	e071      	b.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2a:	d123      	bne.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	f043 0204 	orr.w	r2, r3, #4
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e067      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d041      	beq.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7c:	f7fe fbc6 	bl	800260c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d136      	bne.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	e00b      	b.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e021      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10c      	bne.n	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e00b      	b.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f af6d 	bne.w	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f58:	e034      	b.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f886 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e034      	b.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d028      	beq.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe fb4b 	bl	800260c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11d      	bne.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b80      	cmp	r3, #128	@ 0x80
 8003f94:	d016      	beq.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b80      	cmp	r3, #128	@ 0x80
 8003fd0:	d1c3      	bne.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe8:	e034      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f83e 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e034      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d028      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fe fb03 	bl	800260c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11d      	bne.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d016      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e007      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d1c3      	bne.n	8003fea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004082:	d11b      	bne.n	80040bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800408c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e267      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d075      	beq.n	80041d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040ea:	4b88      	ldr	r3, [pc, #544]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d00c      	beq.n	8004110 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f6:	4b85      	ldr	r3, [pc, #532]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d112      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004102:	4b82      	ldr	r3, [pc, #520]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b7e      	ldr	r3, [pc, #504]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05b      	beq.n	80041d4 <HAL_RCC_OscConfig+0x108>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d157      	bne.n	80041d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e242      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x74>
 8004132:	4b76      	ldr	r3, [pc, #472]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a75      	ldr	r2, [pc, #468]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01d      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x98>
 800414a:	4b70      	ldr	r3, [pc, #448]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6f      	ldr	r2, [pc, #444]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b6d      	ldr	r3, [pc, #436]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6c      	ldr	r2, [pc, #432]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004164:	4b69      	ldr	r3, [pc, #420]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a68      	ldr	r2, [pc, #416]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b66      	ldr	r3, [pc, #408]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a65      	ldr	r2, [pc, #404]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800417a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe fa42 	bl	800260c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe fa3e 	bl	800260c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e207      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b5b      	ldr	r3, [pc, #364]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0xc0>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe fa2e 	bl	800260c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fe fa2a 	bl	800260c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1f3      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	4b51      	ldr	r3, [pc, #324]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0xe8>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041e2:	4b4a      	ldr	r3, [pc, #296]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b47      	ldr	r3, [pc, #284]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d11c      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fa:	4b44      	ldr	r3, [pc, #272]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	4b41      	ldr	r3, [pc, #260]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e1c7      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b3b      	ldr	r3, [pc, #236]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4937      	ldr	r1, [pc, #220]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	e03a      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423c:	4b34      	ldr	r3, [pc, #208]	@ (8004310 <HAL_RCC_OscConfig+0x244>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fe f9e3 	bl	800260c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424a:	f7fe f9df 	bl	800260c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1a8      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	4b2b      	ldr	r3, [pc, #172]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b28      	ldr	r3, [pc, #160]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4925      	ldr	r1, [pc, #148]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427e:	4b24      	ldr	r3, [pc, #144]	@ (8004310 <HAL_RCC_OscConfig+0x244>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fe f9c2 	bl	800260c <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428c:	f7fe f9be 	bl	800260c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e187      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d036      	beq.n	8004324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <HAL_RCC_OscConfig+0x248>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fe f9a2 	bl	800260c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fe f99e 	bl	800260c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e167      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x200>
 80042ea:	e01b      	b.n	8004324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCC_OscConfig+0x248>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fe f98b 	bl	800260c <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	e00e      	b.n	8004318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fe f987 	bl	800260c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d907      	bls.n	8004318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e150      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
 800430c:	40023800 	.word	0x40023800
 8004310:	42470000 	.word	0x42470000
 8004314:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	4b88      	ldr	r3, [pc, #544]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ea      	bne.n	80042fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8097 	beq.w	8004460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004336:	4b81      	ldr	r3, [pc, #516]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	4b7d      	ldr	r3, [pc, #500]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	4a7c      	ldr	r2, [pc, #496]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	@ 0x40
 8004352:	4b7a      	ldr	r3, [pc, #488]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b77      	ldr	r3, [pc, #476]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b74      	ldr	r3, [pc, #464]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a73      	ldr	r2, [pc, #460]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fe f947 	bl	800260c <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fe f943 	bl	800260c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e10c      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2ea>
 80043a8:	4b64      	ldr	r3, [pc, #400]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ac:	4a63      	ldr	r2, [pc, #396]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b4:	e01c      	b.n	80043f0 <HAL_RCC_OscConfig+0x324>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x30c>
 80043be:	4b5f      	ldr	r3, [pc, #380]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a5e      	ldr	r2, [pc, #376]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043c4:	f043 0304 	orr.w	r3, r3, #4
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	4b5c      	ldr	r3, [pc, #368]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	4a5b      	ldr	r2, [pc, #364]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0x324>
 80043d8:	4b58      	ldr	r3, [pc, #352]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043dc:	4a57      	ldr	r2, [pc, #348]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e4:	4b55      	ldr	r3, [pc, #340]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a54      	ldr	r2, [pc, #336]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043ea:	f023 0304 	bic.w	r3, r3, #4
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fe f908 	bl	800260c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fe f904 	bl	800260c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0cb      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004416:	4b49      	ldr	r3, [pc, #292]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0ee      	beq.n	8004400 <HAL_RCC_OscConfig+0x334>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004424:	f7fe f8f2 	bl	800260c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442a:	e00a      	b.n	8004442 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442c:	f7fe f8ee 	bl	800260c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e0b5      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004442:	4b3e      	ldr	r3, [pc, #248]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ee      	bne.n	800442c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d105      	bne.n	8004460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004454:	4b39      	ldr	r3, [pc, #228]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	4a38      	ldr	r2, [pc, #224]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a1 	beq.w	80045ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446a:	4b34      	ldr	r3, [pc, #208]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b08      	cmp	r3, #8
 8004474:	d05c      	beq.n	8004530 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d141      	bne.n	8004502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447e:	4b31      	ldr	r3, [pc, #196]	@ (8004544 <HAL_RCC_OscConfig+0x478>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe f8c2 	bl	800260c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fe f8be 	bl	800260c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e087      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	4b27      	ldr	r3, [pc, #156]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	3b01      	subs	r3, #1
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	491b      	ldr	r1, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x478>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fe f897 	bl	800260c <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fe f893 	bl	800260c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e05c      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x416>
 8004500:	e054      	b.n	80045ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_OscConfig+0x478>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe f880 	bl	800260c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe f87c 	bl	800260c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e045      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x444>
 800452e:	e03d      	b.n	80045ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e038      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
 800453c:	40023800 	.word	0x40023800
 8004540:	40007000 	.word	0x40007000
 8004544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004548:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <HAL_RCC_OscConfig+0x4ec>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d028      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d121      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d11a      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800457e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004580:	4293      	cmp	r3, r2
 8004582:	d111      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cc      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b68      	ldr	r3, [pc, #416]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d90c      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b65      	ldr	r3, [pc, #404]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a58      	ldr	r2, [pc, #352]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800461a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a52      	ldr	r2, [pc, #328]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d044      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d003      	beq.n	800467a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3b      	ldr	r3, [pc, #236]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e067      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4934      	ldr	r1, [pc, #208]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fd ffae 	bl	800260c <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fd ffaa 	bl	800260c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e04f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d20c      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b22      	ldr	r3, [pc, #136]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f821 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490a      	ldr	r1, [pc, #40]	@ (800477c <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd ff0e 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023c00 	.word	0x40023c00
 8004778:	40023800 	.word	0x40023800
 800477c:	080073c0 	.word	0x080073c0
 8004780:	20000020 	.word	0x20000020
 8004784:	20000024 	.word	0x20000024

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800478c:	b094      	sub	sp, #80	@ 0x50
 800478e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a0:	4b79      	ldr	r3, [pc, #484]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d00d      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x40>
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	f200 80e1 	bhi.w	8004974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x34>
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ba:	e0db      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b73      	ldr	r3, [pc, #460]	@ (800498c <HAL_RCC_GetSysClockFreq+0x204>)
 80047be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047c0:	e0db      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c2:	4b73      	ldr	r3, [pc, #460]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x208>)
 80047c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047c6:	e0d8      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d063      	beq.n	80048a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b6a      	ldr	r3, [pc, #424]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	2200      	movs	r2, #0
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f2:	2300      	movs	r3, #0
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047fa:	4622      	mov	r2, r4
 80047fc:	462b      	mov	r3, r5
 80047fe:	f04f 0000 	mov.w	r0, #0
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	0159      	lsls	r1, r3, #5
 8004808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480c:	0150      	lsls	r0, r2, #5
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4621      	mov	r1, r4
 8004814:	1a51      	subs	r1, r2, r1
 8004816:	6139      	str	r1, [r7, #16]
 8004818:	4629      	mov	r1, r5
 800481a:	eb63 0301 	sbc.w	r3, r3, r1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800482c:	4659      	mov	r1, fp
 800482e:	018b      	lsls	r3, r1, #6
 8004830:	4651      	mov	r1, sl
 8004832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004836:	4651      	mov	r1, sl
 8004838:	018a      	lsls	r2, r1, #6
 800483a:	4651      	mov	r1, sl
 800483c:	ebb2 0801 	subs.w	r8, r2, r1
 8004840:	4659      	mov	r1, fp
 8004842:	eb63 0901 	sbc.w	r9, r3, r1
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485a:	4690      	mov	r8, r2
 800485c:	4699      	mov	r9, r3
 800485e:	4623      	mov	r3, r4
 8004860:	eb18 0303 	adds.w	r3, r8, r3
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	462b      	mov	r3, r5
 8004868:	eb49 0303 	adc.w	r3, r9, r3
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800487a:	4629      	mov	r1, r5
 800487c:	024b      	lsls	r3, r1, #9
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004884:	4621      	mov	r1, r4
 8004886:	024a      	lsls	r2, r1, #9
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004898:	f7fc f8dc 	bl	8000a54 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a4:	e058      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	2200      	movs	r2, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	4611      	mov	r1, r2
 80048b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048b6:	623b      	str	r3, [r7, #32]
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80048bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f04f 0100 	mov.w	r1, #0
 80048cc:	0159      	lsls	r1, r3, #5
 80048ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d2:	0150      	lsls	r0, r2, #5
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4641      	mov	r1, r8
 80048da:	ebb2 0a01 	subs.w	sl, r2, r1
 80048de:	4649      	mov	r1, r9
 80048e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048f8:	ebb2 040a 	subs.w	r4, r2, sl
 80048fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	00eb      	lsls	r3, r5, #3
 800490a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490e:	00e2      	lsls	r2, r4, #3
 8004910:	4614      	mov	r4, r2
 8004912:	461d      	mov	r5, r3
 8004914:	4643      	mov	r3, r8
 8004916:	18e3      	adds	r3, r4, r3
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	464b      	mov	r3, r9
 800491c:	eb45 0303 	adc.w	r3, r5, r3
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800492e:	4629      	mov	r1, r5
 8004930:	028b      	lsls	r3, r1, #10
 8004932:	4621      	mov	r1, r4
 8004934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004938:	4621      	mov	r1, r4
 800493a:	028a      	lsls	r2, r1, #10
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004942:	2200      	movs	r2, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800494c:	f7fc f882 	bl	8000a54 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4613      	mov	r3, r2
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	3301      	adds	r3, #1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800496a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004972:	e002      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetSysClockFreq+0x204>)
 8004976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800497c:	4618      	mov	r0, r3
 800497e:	3750      	adds	r7, #80	@ 0x50
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	00f42400 	.word	0x00f42400
 8004990:	007a1200 	.word	0x007a1200

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b03      	ldr	r3, [pc, #12]	@ (80049a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000020 	.word	0x20000020

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b0:	f7ff fff0 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	080073d0 	.word	0x080073d0

080049d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d8:	f7ff ffdc 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0b5b      	lsrs	r3, r3, #13
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4903      	ldr	r1, [pc, #12]	@ (80049f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	080073d0 	.word	0x080073d0

080049fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e041      	b.n	8004a92 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fbee 	bl	8002204 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 fab2 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <HAL_TIM_OC_Start_IT+0x28>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e022      	b.n	8004b0a <HAL_TIM_OC_Start_IT+0x6e>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d109      	bne.n	8004ade <HAL_TIM_OC_Start_IT+0x42>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	bf14      	ite	ne
 8004ad6:	2301      	movne	r3, #1
 8004ad8:	2300      	moveq	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	e015      	b.n	8004b0a <HAL_TIM_OC_Start_IT+0x6e>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d109      	bne.n	8004af8 <HAL_TIM_OC_Start_IT+0x5c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e008      	b.n	8004b0a <HAL_TIM_OC_Start_IT+0x6e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e0c7      	b.n	8004ca2 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_OC_Start_IT+0x86>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b20:	e013      	b.n	8004b4a <HAL_TIM_OC_Start_IT+0xae>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_OC_Start_IT+0x96>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b30:	e00b      	b.n	8004b4a <HAL_TIM_OC_Start_IT+0xae>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_OC_Start_IT+0xa6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b40:	e003      	b.n	8004b4a <HAL_TIM_OC_Start_IT+0xae>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d841      	bhi.n	8004bd4 <HAL_TIM_OC_Start_IT+0x138>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <HAL_TIM_OC_Start_IT+0xbc>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004bd5 	.word	0x08004bd5
 8004b60:	08004bd5 	.word	0x08004bd5
 8004b64:	08004bd5 	.word	0x08004bd5
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004bd5 	.word	0x08004bd5
 8004b74:	08004bd5 	.word	0x08004bd5
 8004b78:	08004bb1 	.word	0x08004bb1
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004bd5 	.word	0x08004bd5
 8004b84:	08004bd5 	.word	0x08004bd5
 8004b88:	08004bc3 	.word	0x08004bc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0202 	orr.w	r2, r2, #2
 8004b9a:	60da      	str	r2, [r3, #12]
      break;
 8004b9c:	e01d      	b.n	8004bda <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0204 	orr.w	r2, r2, #4
 8004bac:	60da      	str	r2, [r3, #12]
      break;
 8004bae:	e014      	b.n	8004bda <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	60da      	str	r2, [r3, #12]
      break;
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0210 	orr.w	r2, r2, #16
 8004bd0:	60da      	str	r2, [r3, #12]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d15f      	bne.n	8004ca0 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fc37 	bl	800545c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8004cac <HAL_TIM_OC_Start_IT+0x210>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIM_OC_Start_IT+0x166>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb0 <HAL_TIM_OC_Start_IT+0x214>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_OC_Start_IT+0x16a>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_TIM_OC_Start_IT+0x16c>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a22      	ldr	r2, [pc, #136]	@ (8004cac <HAL_TIM_OC_Start_IT+0x210>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2e:	d01d      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb4 <HAL_TIM_OC_Start_IT+0x218>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb8 <HAL_TIM_OC_Start_IT+0x21c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <HAL_TIM_OC_Start_IT+0x220>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <HAL_TIM_OC_Start_IT+0x214>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a18      	ldr	r2, [pc, #96]	@ (8004cc0 <HAL_TIM_OC_Start_IT+0x224>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_OC_Start_IT+0x1d0>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <HAL_TIM_OC_Start_IT+0x228>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b06      	cmp	r3, #6
 8004c7c:	d010      	beq.n	8004ca0 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	e007      	b.n	8004ca0 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40001800 	.word	0x40001800

08004cc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e041      	b.n	8004d5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fa3c 	bl	800216c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 f94c 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e048      	b.n	8004e18 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d839      	bhi.n	8004e08 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004e09 	.word	0x08004e09
 8004da8:	08004e09 	.word	0x08004e09
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004e09 	.word	0x08004e09
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004ded 	.word	0x08004ded
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004dfb 	.word	0x08004dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f990 	bl	80050fc <TIM_OC1_SetConfig>
      break;
 8004ddc:	e017      	b.n	8004e0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f9f9 	bl	80051dc <TIM_OC2_SetConfig>
      break;
 8004dea:	e010      	b.n	8004e0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fa68 	bl	80052c8 <TIM_OC3_SetConfig>
      break;
 8004df8:	e009      	b.n	8004e0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fad5 	bl	80053b0 <TIM_OC4_SetConfig>
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e0ae      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	f200 809f 	bhi.w	8004f8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004f8d 	.word	0x08004f8d
 8004e5c:	08004f8d 	.word	0x08004f8d
 8004e60:	08004f8d 	.word	0x08004f8d
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08004f8d 	.word	0x08004f8d
 8004e6c:	08004f8d 	.word	0x08004f8d
 8004e70:	08004f8d 	.word	0x08004f8d
 8004e74:	08004f0b 	.word	0x08004f0b
 8004e78:	08004f8d 	.word	0x08004f8d
 8004e7c:	08004f8d 	.word	0x08004f8d
 8004e80:	08004f8d 	.word	0x08004f8d
 8004e84:	08004f4b 	.word	0x08004f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f934 	bl	80050fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0208 	orr.w	r2, r2, #8
 8004ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0204 	bic.w	r2, r2, #4
 8004eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	619a      	str	r2, [r3, #24]
      break;
 8004ec6:	e064      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f984 	bl	80051dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6999      	ldr	r1, [r3, #24]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	619a      	str	r2, [r3, #24]
      break;
 8004f08:	e043      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f9d9 	bl	80052c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0208 	orr.w	r2, r2, #8
 8004f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0204 	bic.w	r2, r2, #4
 8004f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69d9      	ldr	r1, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
      break;
 8004f48:	e023      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fa2d 	bl	80053b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69d9      	ldr	r1, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	61da      	str	r2, [r3, #28]
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a46      	ldr	r2, [pc, #280]	@ (80050d0 <TIM_Base_SetConfig+0x12c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a43      	ldr	r2, [pc, #268]	@ (80050d4 <TIM_Base_SetConfig+0x130>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a42      	ldr	r2, [pc, #264]	@ (80050d8 <TIM_Base_SetConfig+0x134>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a41      	ldr	r2, [pc, #260]	@ (80050dc <TIM_Base_SetConfig+0x138>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	@ (80050e0 <TIM_Base_SetConfig+0x13c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d108      	bne.n	8004ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a35      	ldr	r2, [pc, #212]	@ (80050d0 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005004:	d027      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a32      	ldr	r2, [pc, #200]	@ (80050d4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d023      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a31      	ldr	r2, [pc, #196]	@ (80050d8 <TIM_Base_SetConfig+0x134>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a30      	ldr	r2, [pc, #192]	@ (80050dc <TIM_Base_SetConfig+0x138>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	@ (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2e      	ldr	r2, [pc, #184]	@ (80050e4 <TIM_Base_SetConfig+0x140>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2d      	ldr	r2, [pc, #180]	@ (80050e8 <TIM_Base_SetConfig+0x144>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2c      	ldr	r2, [pc, #176]	@ (80050ec <TIM_Base_SetConfig+0x148>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2b      	ldr	r2, [pc, #172]	@ (80050f0 <TIM_Base_SetConfig+0x14c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2a      	ldr	r2, [pc, #168]	@ (80050f4 <TIM_Base_SetConfig+0x150>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <TIM_Base_SetConfig+0x154>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a10      	ldr	r2, [pc, #64]	@ (80050d0 <TIM_Base_SetConfig+0x12c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0xf8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d105      	bne.n	80050c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]
  }
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	40001800 	.word	0x40001800
 80050f4:	40001c00 	.word	0x40001c00
 80050f8:	40002000 	.word	0x40002000

080050fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f023 0201 	bic.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a20      	ldr	r2, [pc, #128]	@ (80051d4 <TIM_OC1_SetConfig+0xd8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC1_SetConfig+0x64>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1f      	ldr	r2, [pc, #124]	@ (80051d8 <TIM_OC1_SetConfig+0xdc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10c      	bne.n	800517a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0308 	bic.w	r3, r3, #8
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a15      	ldr	r2, [pc, #84]	@ (80051d4 <TIM_OC1_SetConfig+0xd8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC1_SetConfig+0x8e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	@ (80051d8 <TIM_OC1_SetConfig+0xdc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d111      	bne.n	80051ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0210 	bic.w	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a22      	ldr	r2, [pc, #136]	@ (80052c0 <TIM_OC2_SetConfig+0xe4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC2_SetConfig+0x68>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a21      	ldr	r2, [pc, #132]	@ (80052c4 <TIM_OC2_SetConfig+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10d      	bne.n	8005260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800524a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800525e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <TIM_OC2_SetConfig+0xe4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0x94>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a16      	ldr	r2, [pc, #88]	@ (80052c4 <TIM_OC2_SetConfig+0xe8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400

080052c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a21      	ldr	r2, [pc, #132]	@ (80053a8 <TIM_OC3_SetConfig+0xe0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_OC3_SetConfig+0x66>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a20      	ldr	r2, [pc, #128]	@ (80053ac <TIM_OC3_SetConfig+0xe4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10d      	bne.n	800534a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a16      	ldr	r2, [pc, #88]	@ (80053a8 <TIM_OC3_SetConfig+0xe0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_OC3_SetConfig+0x92>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <TIM_OC3_SetConfig+0xe4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d113      	bne.n	8005382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <TIM_OC4_SetConfig+0xa4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_OC4_SetConfig+0x68>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a11      	ldr	r2, [pc, #68]	@ (8005458 <TIM_OC4_SetConfig+0xa8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800541e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2201      	movs	r2, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054bc:	2302      	movs	r3, #2
 80054be:	e05a      	b.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550c:	d01d      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1b      	ldr	r2, [pc, #108]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1a      	ldr	r2, [pc, #104]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a18      	ldr	r2, [pc, #96]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a17      	ldr	r2, [pc, #92]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a15      	ldr	r2, [pc, #84]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10c      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4313      	orrs	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40001800 	.word	0x40001800

080055a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e03d      	b.n	8005638 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e042      	b.n	80056dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fc fe98 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	@ 0x24
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fcdb 	bl	8006044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800569c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d112      	bne.n	8005724 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_UART_Receive_IT+0x26>
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e00b      	b.n	8005726 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	461a      	mov	r2, r3
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 faba 	bl	8005c94 <UART_Start_Receive_IT>
 8005720:	4603      	mov	r3, r0
 8005722:	e000      	b.n	8005726 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b0ba      	sub	sp, #232	@ 0xe8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800576e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_UART_IRQHandler+0x66>
 8005782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fb99 	bl	8005ec6 <UART_Receive_IT>
      return;
 8005794:	e25b      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80de 	beq.w	800595c <HAL_UART_IRQHandler+0x22c>
 80057a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80d1 	beq.w	800595c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_UART_IRQHandler+0xae>
 80057c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f043 0201 	orr.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <HAL_UART_IRQHandler+0xd2>
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f043 0202 	orr.w	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_UART_IRQHandler+0xf6>
 800580e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <HAL_UART_IRQHandler+0x126>
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d105      	bne.n	800584a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800583e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f043 0208 	orr.w	r2, r3, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 81f2 	beq.w	8005c44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_UART_IRQHandler+0x14e>
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fb24 	bl	8005ec6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <HAL_UART_IRQHandler+0x17a>
 80058a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04f      	beq.n	800594a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa2c 	bl	8005d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b40      	cmp	r3, #64	@ 0x40
 80058bc:	d141      	bne.n	8005942 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d9      	bne.n	80058be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d013      	beq.n	800593a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005916:	4a7e      	ldr	r2, [pc, #504]	@ (8005b10 <HAL_UART_IRQHandler+0x3e0>)
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd fd5d 	bl	80033de <HAL_DMA_Abort_IT>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e00e      	b.n	8005958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f994 	bl	8005c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e00a      	b.n	8005958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f990 	bl	8005c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e006      	b.n	8005958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f98c 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005956:	e175      	b.n	8005c44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	bf00      	nop
    return;
 800595a:	e173      	b.n	8005c44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 814f 	bne.w	8005c04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8148 	beq.w	8005c04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8141 	beq.w	8005c04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	f040 80b6 	bne.w	8005b14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8145 	beq.w	8005c48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c6:	429a      	cmp	r2, r3
 80059c8:	f080 813e 	bcs.w	8005c48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059de:	f000 8088 	beq.w	8005af2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d9      	bne.n	80059e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3314      	adds	r3, #20
 8005a34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e1      	bne.n	8005a2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ad4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ad6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ada:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fd fc06 	bl	80032fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8b7 	bl	8005c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b0e:	e09b      	b.n	8005c48 <HAL_UART_IRQHandler+0x518>
 8005b10:	08005dcf 	.word	0x08005dcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 808e 	beq.w	8005c4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8089 	beq.w	8005c4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e3      	bne.n	8005b3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	623b      	str	r3, [r7, #32]
   return(result);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b96:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e3      	bne.n	8005b72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bdc:	61fa      	str	r2, [r7, #28]
 8005bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e3      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f83d 	bl	8005c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c02:	e023      	b.n	8005c4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <HAL_UART_IRQHandler+0x4f4>
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f8ea 	bl	8005df6 <UART_Transmit_IT>
    return;
 8005c22:	e014      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <HAL_UART_IRQHandler+0x51e>
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f92a 	bl	8005e96 <UART_EndTransmit_IT>
    return;
 8005c42:	e004      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
    return;
 8005c44:	bf00      	nop
 8005c46:	e002      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c4c:	bf00      	nop
  }
}
 8005c4e:	37e8      	adds	r7, #232	@ 0xe8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2222      	movs	r2, #34	@ 0x22
 8005cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cd8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0220 	orr.w	r2, r2, #32
 8005cf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b095      	sub	sp, #84	@ 0x54
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d30:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f023 0301 	bic.w	r3, r3, #1
 8005d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e5      	bne.n	8005d44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d119      	bne.n	8005db4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 0310 	bic.w	r3, r3, #16
 8005d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da0:	61ba      	str	r2, [r7, #24]
 8005da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e5      	bne.n	8005d80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005dc2:	bf00      	nop
 8005dc4:	3754      	adds	r7, #84	@ 0x54
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ff3d 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b21      	cmp	r3, #33	@ 0x21
 8005e08:	d13e      	bne.n	8005e88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e12:	d114      	bne.n	8005e3e <UART_Transmit_IT+0x48>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d110      	bne.n	8005e3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	1c9a      	adds	r2, r3, #2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]
 8005e3c:	e008      	b.n	8005e50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6211      	str	r1, [r2, #32]
 8005e48:	781a      	ldrb	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10f      	bne.n	8005e84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	e000      	b.n	8005e8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
  }
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fecc 	bl	8005c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b08c      	sub	sp, #48	@ 0x30
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b22      	cmp	r3, #34	@ 0x22
 8005ed8:	f040 80ae 	bne.w	8006038 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee4:	d117      	bne.n	8005f16 <UART_Receive_IT+0x50>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d113      	bne.n	8005f16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f14:	e026      	b.n	8005f64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f28:	d007      	beq.n	8005f3a <UART_Receive_IT+0x74>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <UART_Receive_IT+0x82>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e008      	b.n	8005f5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4619      	mov	r1, r3
 8005f72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d15d      	bne.n	8006034 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0220 	bic.w	r2, r2, #32
 8005f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d135      	bne.n	800602a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	623a      	str	r2, [r7, #32]
 8005fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	69f9      	ldr	r1, [r7, #28]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d10a      	bne.n	800601c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fe2a 	bl	8005c7c <HAL_UARTEx_RxEventCallback>
 8006028:	e002      	b.n	8006030 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fb f83a 	bl	80010a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e002      	b.n	800603a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3730      	adds	r7, #48	@ 0x30
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006048:	b0c0      	sub	sp, #256	@ 0x100
 800604a:	af00      	add	r7, sp, #0
 800604c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	68d9      	ldr	r1, [r3, #12]
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	ea40 0301 	orr.w	r3, r0, r1
 800606c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	431a      	orrs	r2, r3
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	431a      	orrs	r2, r3
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800609c:	f021 010c 	bic.w	r1, r1, #12
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060aa:	430b      	orrs	r3, r1
 80060ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060be:	6999      	ldr	r1, [r3, #24]
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	ea40 0301 	orr.w	r3, r0, r1
 80060ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b8f      	ldr	r3, [pc, #572]	@ (8006310 <UART_SetConfig+0x2cc>)
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d005      	beq.n	80060e4 <UART_SetConfig+0xa0>
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b8d      	ldr	r3, [pc, #564]	@ (8006314 <UART_SetConfig+0x2d0>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d104      	bne.n	80060ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fe fc76 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 80060e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060ec:	e003      	b.n	80060f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fe fc5d 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 80060f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006100:	f040 810c 	bne.w	800631c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006108:	2200      	movs	r2, #0
 800610a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800610e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006116:	4622      	mov	r2, r4
 8006118:	462b      	mov	r3, r5
 800611a:	1891      	adds	r1, r2, r2
 800611c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800611e:	415b      	adcs	r3, r3
 8006120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006126:	4621      	mov	r1, r4
 8006128:	eb12 0801 	adds.w	r8, r2, r1
 800612c:	4629      	mov	r1, r5
 800612e:	eb43 0901 	adc.w	r9, r3, r1
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800613e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006146:	4690      	mov	r8, r2
 8006148:	4699      	mov	r9, r3
 800614a:	4623      	mov	r3, r4
 800614c:	eb18 0303 	adds.w	r3, r8, r3
 8006150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006154:	462b      	mov	r3, r5
 8006156:	eb49 0303 	adc.w	r3, r9, r3
 800615a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800616a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800616e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006172:	460b      	mov	r3, r1
 8006174:	18db      	adds	r3, r3, r3
 8006176:	653b      	str	r3, [r7, #80]	@ 0x50
 8006178:	4613      	mov	r3, r2
 800617a:	eb42 0303 	adc.w	r3, r2, r3
 800617e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006188:	f7fa fc64 	bl	8000a54 <__aeabi_uldivmod>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4b61      	ldr	r3, [pc, #388]	@ (8006318 <UART_SetConfig+0x2d4>)
 8006192:	fba3 2302 	umull	r2, r3, r3, r2
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	011c      	lsls	r4, r3, #4
 800619a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	1891      	adds	r1, r2, r2
 80061b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061b4:	415b      	adcs	r3, r3
 80061b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061bc:	4641      	mov	r1, r8
 80061be:	eb12 0a01 	adds.w	sl, r2, r1
 80061c2:	4649      	mov	r1, r9
 80061c4:	eb43 0b01 	adc.w	fp, r3, r1
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061dc:	4692      	mov	sl, r2
 80061de:	469b      	mov	fp, r3
 80061e0:	4643      	mov	r3, r8
 80061e2:	eb1a 0303 	adds.w	r3, sl, r3
 80061e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ea:	464b      	mov	r3, r9
 80061ec:	eb4b 0303 	adc.w	r3, fp, r3
 80061f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006200:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006208:	460b      	mov	r3, r1
 800620a:	18db      	adds	r3, r3, r3
 800620c:	643b      	str	r3, [r7, #64]	@ 0x40
 800620e:	4613      	mov	r3, r2
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	647b      	str	r3, [r7, #68]	@ 0x44
 8006216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800621a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800621e:	f7fa fc19 	bl	8000a54 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4611      	mov	r1, r2
 8006228:	4b3b      	ldr	r3, [pc, #236]	@ (8006318 <UART_SetConfig+0x2d4>)
 800622a:	fba3 2301 	umull	r2, r3, r3, r1
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2264      	movs	r2, #100	@ 0x64
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800623e:	4b36      	ldr	r3, [pc, #216]	@ (8006318 <UART_SetConfig+0x2d4>)
 8006240:	fba3 2302 	umull	r2, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800624c:	441c      	add	r4, r3
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006258:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800625c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006268:	415b      	adcs	r3, r3
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800626c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006270:	4641      	mov	r1, r8
 8006272:	1851      	adds	r1, r2, r1
 8006274:	6339      	str	r1, [r7, #48]	@ 0x30
 8006276:	4649      	mov	r1, r9
 8006278:	414b      	adcs	r3, r1
 800627a:	637b      	str	r3, [r7, #52]	@ 0x34
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006288:	4659      	mov	r1, fp
 800628a:	00cb      	lsls	r3, r1, #3
 800628c:	4651      	mov	r1, sl
 800628e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006292:	4651      	mov	r1, sl
 8006294:	00ca      	lsls	r2, r1, #3
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	4603      	mov	r3, r0
 800629c:	4642      	mov	r2, r8
 800629e:	189b      	adds	r3, r3, r2
 80062a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a4:	464b      	mov	r3, r9
 80062a6:	460a      	mov	r2, r1
 80062a8:	eb42 0303 	adc.w	r3, r2, r3
 80062ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062c4:	460b      	mov	r3, r1
 80062c6:	18db      	adds	r3, r3, r3
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ca:	4613      	mov	r3, r2
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062da:	f7fa fbbb 	bl	8000a54 <__aeabi_uldivmod>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006318 <UART_SetConfig+0x2d4>)
 80062e4:	fba3 1302 	umull	r1, r3, r3, r2
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	2164      	movs	r1, #100	@ 0x64
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	3332      	adds	r3, #50	@ 0x32
 80062f6:	4a08      	ldr	r2, [pc, #32]	@ (8006318 <UART_SetConfig+0x2d4>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	f003 0207 	and.w	r2, r3, #7
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4422      	add	r2, r4
 800630a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800630c:	e106      	b.n	800651c <UART_SetConfig+0x4d8>
 800630e:	bf00      	nop
 8006310:	40011000 	.word	0x40011000
 8006314:	40011400 	.word	0x40011400
 8006318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800631c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006320:	2200      	movs	r2, #0
 8006322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006326:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800632a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800632e:	4642      	mov	r2, r8
 8006330:	464b      	mov	r3, r9
 8006332:	1891      	adds	r1, r2, r2
 8006334:	6239      	str	r1, [r7, #32]
 8006336:	415b      	adcs	r3, r3
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
 800633a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800633e:	4641      	mov	r1, r8
 8006340:	1854      	adds	r4, r2, r1
 8006342:	4649      	mov	r1, r9
 8006344:	eb43 0501 	adc.w	r5, r3, r1
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	00eb      	lsls	r3, r5, #3
 8006352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006356:	00e2      	lsls	r2, r4, #3
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	4643      	mov	r3, r8
 800635e:	18e3      	adds	r3, r4, r3
 8006360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006364:	464b      	mov	r3, r9
 8006366:	eb45 0303 	adc.w	r3, r5, r3
 800636a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800637a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800638a:	4629      	mov	r1, r5
 800638c:	008b      	lsls	r3, r1, #2
 800638e:	4621      	mov	r1, r4
 8006390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006394:	4621      	mov	r1, r4
 8006396:	008a      	lsls	r2, r1, #2
 8006398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800639c:	f7fa fb5a 	bl	8000a54 <__aeabi_uldivmod>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4b60      	ldr	r3, [pc, #384]	@ (8006528 <UART_SetConfig+0x4e4>)
 80063a6:	fba3 2302 	umull	r2, r3, r3, r2
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	011c      	lsls	r4, r3, #4
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	1891      	adds	r1, r2, r2
 80063c6:	61b9      	str	r1, [r7, #24]
 80063c8:	415b      	adcs	r3, r3
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d0:	4641      	mov	r1, r8
 80063d2:	1851      	adds	r1, r2, r1
 80063d4:	6139      	str	r1, [r7, #16]
 80063d6:	4649      	mov	r1, r9
 80063d8:	414b      	adcs	r3, r1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e8:	4659      	mov	r1, fp
 80063ea:	00cb      	lsls	r3, r1, #3
 80063ec:	4651      	mov	r1, sl
 80063ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f2:	4651      	mov	r1, sl
 80063f4:	00ca      	lsls	r2, r1, #3
 80063f6:	4610      	mov	r0, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	4642      	mov	r2, r8
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006404:	464b      	mov	r3, r9
 8006406:	460a      	mov	r2, r1
 8006408:	eb42 0303 	adc.w	r3, r2, r3
 800640c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800641a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006428:	4649      	mov	r1, r9
 800642a:	008b      	lsls	r3, r1, #2
 800642c:	4641      	mov	r1, r8
 800642e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006432:	4641      	mov	r1, r8
 8006434:	008a      	lsls	r2, r1, #2
 8006436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800643a:	f7fa fb0b 	bl	8000a54 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4611      	mov	r1, r2
 8006444:	4b38      	ldr	r3, [pc, #224]	@ (8006528 <UART_SetConfig+0x4e4>)
 8006446:	fba3 2301 	umull	r2, r3, r3, r1
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	2264      	movs	r2, #100	@ 0x64
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	1acb      	subs	r3, r1, r3
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	3332      	adds	r3, #50	@ 0x32
 8006458:	4a33      	ldr	r2, [pc, #204]	@ (8006528 <UART_SetConfig+0x4e4>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006464:	441c      	add	r4, r3
 8006466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646a:	2200      	movs	r2, #0
 800646c:	673b      	str	r3, [r7, #112]	@ 0x70
 800646e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	415b      	adcs	r3, r3
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006484:	4641      	mov	r1, r8
 8006486:	1851      	adds	r1, r2, r1
 8006488:	6039      	str	r1, [r7, #0]
 800648a:	4649      	mov	r1, r9
 800648c:	414b      	adcs	r3, r1
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800649c:	4659      	mov	r1, fp
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a6:	4651      	mov	r1, sl
 80064a8:	00ca      	lsls	r2, r1, #3
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	4642      	mov	r2, r8
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064b6:	464b      	mov	r3, r9
 80064b8:	460a      	mov	r2, r1
 80064ba:	eb42 0303 	adc.w	r3, r2, r3
 80064be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064d8:	4649      	mov	r1, r9
 80064da:	008b      	lsls	r3, r1, #2
 80064dc:	4641      	mov	r1, r8
 80064de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e2:	4641      	mov	r1, r8
 80064e4:	008a      	lsls	r2, r1, #2
 80064e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064ea:	f7fa fab3 	bl	8000a54 <__aeabi_uldivmod>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <UART_SetConfig+0x4e4>)
 80064f4:	fba3 1302 	umull	r1, r3, r3, r2
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	2164      	movs	r1, #100	@ 0x64
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	3332      	adds	r3, #50	@ 0x32
 8006506:	4a08      	ldr	r2, [pc, #32]	@ (8006528 <UART_SetConfig+0x4e4>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4422      	add	r2, r4
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bf00      	nop
 800651e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006522:	46bd      	mov	sp, r7
 8006524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006528:	51eb851f 	.word	0x51eb851f

0800652c <memset>:
 800652c:	4402      	add	r2, r0
 800652e:	4603      	mov	r3, r0
 8006530:	4293      	cmp	r3, r2
 8006532:	d100      	bne.n	8006536 <memset+0xa>
 8006534:	4770      	bx	lr
 8006536:	f803 1b01 	strb.w	r1, [r3], #1
 800653a:	e7f9      	b.n	8006530 <memset+0x4>

0800653c <__errno>:
 800653c:	4b01      	ldr	r3, [pc, #4]	@ (8006544 <__errno+0x8>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000002c 	.word	0x2000002c

08006548 <__libc_init_array>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	4d0d      	ldr	r5, [pc, #52]	@ (8006580 <__libc_init_array+0x38>)
 800654c:	4c0d      	ldr	r4, [pc, #52]	@ (8006584 <__libc_init_array+0x3c>)
 800654e:	1b64      	subs	r4, r4, r5
 8006550:	10a4      	asrs	r4, r4, #2
 8006552:	2600      	movs	r6, #0
 8006554:	42a6      	cmp	r6, r4
 8006556:	d109      	bne.n	800656c <__libc_init_array+0x24>
 8006558:	4d0b      	ldr	r5, [pc, #44]	@ (8006588 <__libc_init_array+0x40>)
 800655a:	4c0c      	ldr	r4, [pc, #48]	@ (800658c <__libc_init_array+0x44>)
 800655c:	f000 ff24 	bl	80073a8 <_init>
 8006560:	1b64      	subs	r4, r4, r5
 8006562:	10a4      	asrs	r4, r4, #2
 8006564:	2600      	movs	r6, #0
 8006566:	42a6      	cmp	r6, r4
 8006568:	d105      	bne.n	8006576 <__libc_init_array+0x2e>
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006570:	4798      	blx	r3
 8006572:	3601      	adds	r6, #1
 8006574:	e7ee      	b.n	8006554 <__libc_init_array+0xc>
 8006576:	f855 3b04 	ldr.w	r3, [r5], #4
 800657a:	4798      	blx	r3
 800657c:	3601      	adds	r6, #1
 800657e:	e7f2      	b.n	8006566 <__libc_init_array+0x1e>
 8006580:	080077e8 	.word	0x080077e8
 8006584:	080077e8 	.word	0x080077e8
 8006588:	080077e8 	.word	0x080077e8
 800658c:	080077ec 	.word	0x080077ec

08006590 <atan2f>:
 8006590:	f000 b94c 	b.w	800682c <__ieee754_atan2f>

08006594 <sqrtf>:
 8006594:	b508      	push	{r3, lr}
 8006596:	ed2d 8b02 	vpush	{d8}
 800659a:	eeb0 8a40 	vmov.f32	s16, s0
 800659e:	f000 f8a1 	bl	80066e4 <__ieee754_sqrtf>
 80065a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	d60c      	bvs.n	80065c6 <sqrtf+0x32>
 80065ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80065cc <sqrtf+0x38>
 80065b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80065b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b8:	d505      	bpl.n	80065c6 <sqrtf+0x32>
 80065ba:	f7ff ffbf 	bl	800653c <__errno>
 80065be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80065c2:	2321      	movs	r3, #33	@ 0x21
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	ecbd 8b02 	vpop	{d8}
 80065ca:	bd08      	pop	{r3, pc}
 80065cc:	00000000 	.word	0x00000000

080065d0 <cosf>:
 80065d0:	ee10 3a10 	vmov	r3, s0
 80065d4:	b507      	push	{r0, r1, r2, lr}
 80065d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006650 <cosf+0x80>)
 80065d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065dc:	4293      	cmp	r3, r2
 80065de:	d806      	bhi.n	80065ee <cosf+0x1e>
 80065e0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006654 <cosf+0x84>
 80065e4:	b003      	add	sp, #12
 80065e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ea:	f000 b87f 	b.w	80066ec <__kernel_cosf>
 80065ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80065f2:	d304      	bcc.n	80065fe <cosf+0x2e>
 80065f4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80065f8:	b003      	add	sp, #12
 80065fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80065fe:	4668      	mov	r0, sp
 8006600:	f000 f9b4 	bl	800696c <__ieee754_rem_pio2f>
 8006604:	f000 0003 	and.w	r0, r0, #3
 8006608:	2801      	cmp	r0, #1
 800660a:	d009      	beq.n	8006620 <cosf+0x50>
 800660c:	2802      	cmp	r0, #2
 800660e:	d010      	beq.n	8006632 <cosf+0x62>
 8006610:	b9b0      	cbnz	r0, 8006640 <cosf+0x70>
 8006612:	eddd 0a01 	vldr	s1, [sp, #4]
 8006616:	ed9d 0a00 	vldr	s0, [sp]
 800661a:	f000 f867 	bl	80066ec <__kernel_cosf>
 800661e:	e7eb      	b.n	80065f8 <cosf+0x28>
 8006620:	eddd 0a01 	vldr	s1, [sp, #4]
 8006624:	ed9d 0a00 	vldr	s0, [sp]
 8006628:	f000 f8b8 	bl	800679c <__kernel_sinf>
 800662c:	eeb1 0a40 	vneg.f32	s0, s0
 8006630:	e7e2      	b.n	80065f8 <cosf+0x28>
 8006632:	eddd 0a01 	vldr	s1, [sp, #4]
 8006636:	ed9d 0a00 	vldr	s0, [sp]
 800663a:	f000 f857 	bl	80066ec <__kernel_cosf>
 800663e:	e7f5      	b.n	800662c <cosf+0x5c>
 8006640:	eddd 0a01 	vldr	s1, [sp, #4]
 8006644:	ed9d 0a00 	vldr	s0, [sp]
 8006648:	2001      	movs	r0, #1
 800664a:	f000 f8a7 	bl	800679c <__kernel_sinf>
 800664e:	e7d3      	b.n	80065f8 <cosf+0x28>
 8006650:	3f490fd8 	.word	0x3f490fd8
 8006654:	00000000 	.word	0x00000000

08006658 <sinf>:
 8006658:	ee10 3a10 	vmov	r3, s0
 800665c:	b507      	push	{r0, r1, r2, lr}
 800665e:	4a1f      	ldr	r2, [pc, #124]	@ (80066dc <sinf+0x84>)
 8006660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006664:	4293      	cmp	r3, r2
 8006666:	d807      	bhi.n	8006678 <sinf+0x20>
 8006668:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80066e0 <sinf+0x88>
 800666c:	2000      	movs	r0, #0
 800666e:	b003      	add	sp, #12
 8006670:	f85d eb04 	ldr.w	lr, [sp], #4
 8006674:	f000 b892 	b.w	800679c <__kernel_sinf>
 8006678:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800667c:	d304      	bcc.n	8006688 <sinf+0x30>
 800667e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006682:	b003      	add	sp, #12
 8006684:	f85d fb04 	ldr.w	pc, [sp], #4
 8006688:	4668      	mov	r0, sp
 800668a:	f000 f96f 	bl	800696c <__ieee754_rem_pio2f>
 800668e:	f000 0003 	and.w	r0, r0, #3
 8006692:	2801      	cmp	r0, #1
 8006694:	d00a      	beq.n	80066ac <sinf+0x54>
 8006696:	2802      	cmp	r0, #2
 8006698:	d00f      	beq.n	80066ba <sinf+0x62>
 800669a:	b9c0      	cbnz	r0, 80066ce <sinf+0x76>
 800669c:	eddd 0a01 	vldr	s1, [sp, #4]
 80066a0:	ed9d 0a00 	vldr	s0, [sp]
 80066a4:	2001      	movs	r0, #1
 80066a6:	f000 f879 	bl	800679c <__kernel_sinf>
 80066aa:	e7ea      	b.n	8006682 <sinf+0x2a>
 80066ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80066b0:	ed9d 0a00 	vldr	s0, [sp]
 80066b4:	f000 f81a 	bl	80066ec <__kernel_cosf>
 80066b8:	e7e3      	b.n	8006682 <sinf+0x2a>
 80066ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80066be:	ed9d 0a00 	vldr	s0, [sp]
 80066c2:	2001      	movs	r0, #1
 80066c4:	f000 f86a 	bl	800679c <__kernel_sinf>
 80066c8:	eeb1 0a40 	vneg.f32	s0, s0
 80066cc:	e7d9      	b.n	8006682 <sinf+0x2a>
 80066ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80066d2:	ed9d 0a00 	vldr	s0, [sp]
 80066d6:	f000 f809 	bl	80066ec <__kernel_cosf>
 80066da:	e7f5      	b.n	80066c8 <sinf+0x70>
 80066dc:	3f490fd8 	.word	0x3f490fd8
 80066e0:	00000000 	.word	0x00000000

080066e4 <__ieee754_sqrtf>:
 80066e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80066e8:	4770      	bx	lr
	...

080066ec <__kernel_cosf>:
 80066ec:	ee10 3a10 	vmov	r3, s0
 80066f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80066f8:	eef0 6a40 	vmov.f32	s13, s0
 80066fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006700:	d204      	bcs.n	800670c <__kernel_cosf+0x20>
 8006702:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8006706:	ee17 2a90 	vmov	r2, s15
 800670a:	b342      	cbz	r2, 800675e <__kernel_cosf+0x72>
 800670c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006710:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800677c <__kernel_cosf+0x90>
 8006714:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8006780 <__kernel_cosf+0x94>
 8006718:	4a1a      	ldr	r2, [pc, #104]	@ (8006784 <__kernel_cosf+0x98>)
 800671a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800671e:	4293      	cmp	r3, r2
 8006720:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006788 <__kernel_cosf+0x9c>
 8006724:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006728:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800678c <__kernel_cosf+0xa0>
 800672c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006730:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8006790 <__kernel_cosf+0xa4>
 8006734:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006738:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8006794 <__kernel_cosf+0xa8>
 800673c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006740:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8006744:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006748:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800674c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8006750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006754:	d804      	bhi.n	8006760 <__kernel_cosf+0x74>
 8006756:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800675a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800675e:	4770      	bx	lr
 8006760:	4a0d      	ldr	r2, [pc, #52]	@ (8006798 <__kernel_cosf+0xac>)
 8006762:	4293      	cmp	r3, r2
 8006764:	bf9a      	itte	ls
 8006766:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800676a:	ee07 3a10 	vmovls	s14, r3
 800676e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8006772:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800677a:	e7ec      	b.n	8006756 <__kernel_cosf+0x6a>
 800677c:	ad47d74e 	.word	0xad47d74e
 8006780:	310f74f6 	.word	0x310f74f6
 8006784:	3e999999 	.word	0x3e999999
 8006788:	b493f27c 	.word	0xb493f27c
 800678c:	37d00d01 	.word	0x37d00d01
 8006790:	bab60b61 	.word	0xbab60b61
 8006794:	3d2aaaab 	.word	0x3d2aaaab
 8006798:	3f480000 	.word	0x3f480000

0800679c <__kernel_sinf>:
 800679c:	ee10 3a10 	vmov	r3, s0
 80067a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80067a8:	d204      	bcs.n	80067b4 <__kernel_sinf+0x18>
 80067aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80067ae:	ee17 3a90 	vmov	r3, s15
 80067b2:	b35b      	cbz	r3, 800680c <__kernel_sinf+0x70>
 80067b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80067b8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006810 <__kernel_sinf+0x74>
 80067bc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8006814 <__kernel_sinf+0x78>
 80067c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80067c4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8006818 <__kernel_sinf+0x7c>
 80067c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80067cc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800681c <__kernel_sinf+0x80>
 80067d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80067d4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8006820 <__kernel_sinf+0x84>
 80067d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80067dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80067e0:	b930      	cbnz	r0, 80067f0 <__kernel_sinf+0x54>
 80067e2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8006824 <__kernel_sinf+0x88>
 80067e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80067ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 80067ee:	4770      	bx	lr
 80067f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80067f4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80067f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80067fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006800:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006828 <__kernel_sinf+0x8c>
 8006804:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006808:	ee30 0a60 	vsub.f32	s0, s0, s1
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	2f2ec9d3 	.word	0x2f2ec9d3
 8006814:	b2d72f34 	.word	0xb2d72f34
 8006818:	3638ef1b 	.word	0x3638ef1b
 800681c:	b9500d01 	.word	0xb9500d01
 8006820:	3c088889 	.word	0x3c088889
 8006824:	be2aaaab 	.word	0xbe2aaaab
 8006828:	3e2aaaab 	.word	0x3e2aaaab

0800682c <__ieee754_atan2f>:
 800682c:	ee10 2a90 	vmov	r2, s1
 8006830:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8006834:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006838:	b510      	push	{r4, lr}
 800683a:	eef0 7a40 	vmov.f32	s15, s0
 800683e:	d806      	bhi.n	800684e <__ieee754_atan2f+0x22>
 8006840:	ee10 0a10 	vmov	r0, s0
 8006844:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006848:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800684c:	d904      	bls.n	8006858 <__ieee754_atan2f+0x2c>
 800684e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006852:	eeb0 0a67 	vmov.f32	s0, s15
 8006856:	bd10      	pop	{r4, pc}
 8006858:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800685c:	d103      	bne.n	8006866 <__ieee754_atan2f+0x3a>
 800685e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006862:	f000 b9b3 	b.w	8006bcc <atanf>
 8006866:	1794      	asrs	r4, r2, #30
 8006868:	f004 0402 	and.w	r4, r4, #2
 800686c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006870:	b943      	cbnz	r3, 8006884 <__ieee754_atan2f+0x58>
 8006872:	2c02      	cmp	r4, #2
 8006874:	d05e      	beq.n	8006934 <__ieee754_atan2f+0x108>
 8006876:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006948 <__ieee754_atan2f+0x11c>
 800687a:	2c03      	cmp	r4, #3
 800687c:	bf08      	it	eq
 800687e:	eef0 7a47 	vmoveq.f32	s15, s14
 8006882:	e7e6      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006884:	b941      	cbnz	r1, 8006898 <__ieee754_atan2f+0x6c>
 8006886:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800694c <__ieee754_atan2f+0x120>
 800688a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006950 <__ieee754_atan2f+0x124>
 800688e:	2800      	cmp	r0, #0
 8006890:	bfa8      	it	ge
 8006892:	eef0 7a47 	vmovge.f32	s15, s14
 8006896:	e7dc      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006898:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800689c:	d110      	bne.n	80068c0 <__ieee754_atan2f+0x94>
 800689e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80068a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80068a6:	d107      	bne.n	80068b8 <__ieee754_atan2f+0x8c>
 80068a8:	2c02      	cmp	r4, #2
 80068aa:	d846      	bhi.n	800693a <__ieee754_atan2f+0x10e>
 80068ac:	4b29      	ldr	r3, [pc, #164]	@ (8006954 <__ieee754_atan2f+0x128>)
 80068ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	e7cc      	b.n	8006852 <__ieee754_atan2f+0x26>
 80068b8:	2c02      	cmp	r4, #2
 80068ba:	d841      	bhi.n	8006940 <__ieee754_atan2f+0x114>
 80068bc:	4b26      	ldr	r3, [pc, #152]	@ (8006958 <__ieee754_atan2f+0x12c>)
 80068be:	e7f6      	b.n	80068ae <__ieee754_atan2f+0x82>
 80068c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80068c4:	d0df      	beq.n	8006886 <__ieee754_atan2f+0x5a>
 80068c6:	1a5b      	subs	r3, r3, r1
 80068c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80068cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80068d0:	da1a      	bge.n	8006908 <__ieee754_atan2f+0xdc>
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	da01      	bge.n	80068da <__ieee754_atan2f+0xae>
 80068d6:	313c      	adds	r1, #60	@ 0x3c
 80068d8:	db19      	blt.n	800690e <__ieee754_atan2f+0xe2>
 80068da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80068de:	f000 fa49 	bl	8006d74 <fabsf>
 80068e2:	f000 f973 	bl	8006bcc <atanf>
 80068e6:	eef0 7a40 	vmov.f32	s15, s0
 80068ea:	2c01      	cmp	r4, #1
 80068ec:	d012      	beq.n	8006914 <__ieee754_atan2f+0xe8>
 80068ee:	2c02      	cmp	r4, #2
 80068f0:	d017      	beq.n	8006922 <__ieee754_atan2f+0xf6>
 80068f2:	2c00      	cmp	r4, #0
 80068f4:	d0ad      	beq.n	8006852 <__ieee754_atan2f+0x26>
 80068f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800695c <__ieee754_atan2f+0x130>
 80068fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006960 <__ieee754_atan2f+0x134>
 8006902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006906:	e7a4      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006908:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006950 <__ieee754_atan2f+0x124>
 800690c:	e7ed      	b.n	80068ea <__ieee754_atan2f+0xbe>
 800690e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006964 <__ieee754_atan2f+0x138>
 8006912:	e7ea      	b.n	80068ea <__ieee754_atan2f+0xbe>
 8006914:	ee17 3a90 	vmov	r3, s15
 8006918:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	e797      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006922:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800695c <__ieee754_atan2f+0x130>
 8006926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800692a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006960 <__ieee754_atan2f+0x134>
 800692e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006932:	e78e      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006934:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006960 <__ieee754_atan2f+0x134>
 8006938:	e78b      	b.n	8006852 <__ieee754_atan2f+0x26>
 800693a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006968 <__ieee754_atan2f+0x13c>
 800693e:	e788      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006940:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8006964 <__ieee754_atan2f+0x138>
 8006944:	e785      	b.n	8006852 <__ieee754_atan2f+0x26>
 8006946:	bf00      	nop
 8006948:	c0490fdb 	.word	0xc0490fdb
 800694c:	bfc90fdb 	.word	0xbfc90fdb
 8006950:	3fc90fdb 	.word	0x3fc90fdb
 8006954:	080073e4 	.word	0x080073e4
 8006958:	080073d8 	.word	0x080073d8
 800695c:	33bbbd2e 	.word	0x33bbbd2e
 8006960:	40490fdb 	.word	0x40490fdb
 8006964:	00000000 	.word	0x00000000
 8006968:	3f490fdb 	.word	0x3f490fdb

0800696c <__ieee754_rem_pio2f>:
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	ee10 6a10 	vmov	r6, s0
 8006972:	4b88      	ldr	r3, [pc, #544]	@ (8006b94 <__ieee754_rem_pio2f+0x228>)
 8006974:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8006978:	429d      	cmp	r5, r3
 800697a:	b087      	sub	sp, #28
 800697c:	4604      	mov	r4, r0
 800697e:	d805      	bhi.n	800698c <__ieee754_rem_pio2f+0x20>
 8006980:	2300      	movs	r3, #0
 8006982:	ed80 0a00 	vstr	s0, [r0]
 8006986:	6043      	str	r3, [r0, #4]
 8006988:	2000      	movs	r0, #0
 800698a:	e022      	b.n	80069d2 <__ieee754_rem_pio2f+0x66>
 800698c:	4b82      	ldr	r3, [pc, #520]	@ (8006b98 <__ieee754_rem_pio2f+0x22c>)
 800698e:	429d      	cmp	r5, r3
 8006990:	d83a      	bhi.n	8006a08 <__ieee754_rem_pio2f+0x9c>
 8006992:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006996:	2e00      	cmp	r6, #0
 8006998:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006b9c <__ieee754_rem_pio2f+0x230>
 800699c:	4a80      	ldr	r2, [pc, #512]	@ (8006ba0 <__ieee754_rem_pio2f+0x234>)
 800699e:	f023 030f 	bic.w	r3, r3, #15
 80069a2:	dd18      	ble.n	80069d6 <__ieee754_rem_pio2f+0x6a>
 80069a4:	4293      	cmp	r3, r2
 80069a6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80069aa:	bf09      	itett	eq
 80069ac:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8006ba4 <__ieee754_rem_pio2f+0x238>
 80069b0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006ba8 <__ieee754_rem_pio2f+0x23c>
 80069b4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006bac <__ieee754_rem_pio2f+0x240>
 80069b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80069bc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80069c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069c4:	ed80 7a00 	vstr	s14, [r0]
 80069c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069cc:	edc0 7a01 	vstr	s15, [r0, #4]
 80069d0:	2001      	movs	r0, #1
 80069d2:	b007      	add	sp, #28
 80069d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d6:	4293      	cmp	r3, r2
 80069d8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80069dc:	bf09      	itett	eq
 80069de:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8006ba4 <__ieee754_rem_pio2f+0x238>
 80069e2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006ba8 <__ieee754_rem_pio2f+0x23c>
 80069e6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006bac <__ieee754_rem_pio2f+0x240>
 80069ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80069ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80069f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069f6:	ed80 7a00 	vstr	s14, [r0]
 80069fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fe:	edc0 7a01 	vstr	s15, [r0, #4]
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295
 8006a06:	e7e4      	b.n	80069d2 <__ieee754_rem_pio2f+0x66>
 8006a08:	4b69      	ldr	r3, [pc, #420]	@ (8006bb0 <__ieee754_rem_pio2f+0x244>)
 8006a0a:	429d      	cmp	r5, r3
 8006a0c:	d873      	bhi.n	8006af6 <__ieee754_rem_pio2f+0x18a>
 8006a0e:	f000 f9b1 	bl	8006d74 <fabsf>
 8006a12:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006bb4 <__ieee754_rem_pio2f+0x248>
 8006a16:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006a1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a26:	ee17 0a90 	vmov	r0, s15
 8006a2a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006b9c <__ieee754_rem_pio2f+0x230>
 8006a2e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006a32:	281f      	cmp	r0, #31
 8006a34:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006ba8 <__ieee754_rem_pio2f+0x23c>
 8006a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3c:	eeb1 6a47 	vneg.f32	s12, s14
 8006a40:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006a44:	ee16 1a90 	vmov	r1, s13
 8006a48:	dc09      	bgt.n	8006a5e <__ieee754_rem_pio2f+0xf2>
 8006a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8006bb8 <__ieee754_rem_pio2f+0x24c>)
 8006a4c:	1e47      	subs	r7, r0, #1
 8006a4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006a52:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8006a56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d107      	bne.n	8006a6e <__ieee754_rem_pio2f+0x102>
 8006a5e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8006a62:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8006a66:	2a08      	cmp	r2, #8
 8006a68:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006a6c:	dc14      	bgt.n	8006a98 <__ieee754_rem_pio2f+0x12c>
 8006a6e:	6021      	str	r1, [r4, #0]
 8006a70:	ed94 7a00 	vldr	s14, [r4]
 8006a74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006a7e:	ed84 0a01 	vstr	s0, [r4, #4]
 8006a82:	daa6      	bge.n	80069d2 <__ieee754_rem_pio2f+0x66>
 8006a84:	eeb1 7a47 	vneg.f32	s14, s14
 8006a88:	eeb1 0a40 	vneg.f32	s0, s0
 8006a8c:	ed84 7a00 	vstr	s14, [r4]
 8006a90:	ed84 0a01 	vstr	s0, [r4, #4]
 8006a94:	4240      	negs	r0, r0
 8006a96:	e79c      	b.n	80069d2 <__ieee754_rem_pio2f+0x66>
 8006a98:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8006ba4 <__ieee754_rem_pio2f+0x238>
 8006a9c:	eef0 6a40 	vmov.f32	s13, s0
 8006aa0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006aa4:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006aa8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006aac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006bac <__ieee754_rem_pio2f+0x240>
 8006ab0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006ab4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006ab8:	ee15 2a90 	vmov	r2, s11
 8006abc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006ac0:	1a5b      	subs	r3, r3, r1
 8006ac2:	2b19      	cmp	r3, #25
 8006ac4:	dc04      	bgt.n	8006ad0 <__ieee754_rem_pio2f+0x164>
 8006ac6:	edc4 5a00 	vstr	s11, [r4]
 8006aca:	eeb0 0a66 	vmov.f32	s0, s13
 8006ace:	e7cf      	b.n	8006a70 <__ieee754_rem_pio2f+0x104>
 8006ad0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006bbc <__ieee754_rem_pio2f+0x250>
 8006ad4:	eeb0 0a66 	vmov.f32	s0, s13
 8006ad8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006adc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006ae0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8006bc0 <__ieee754_rem_pio2f+0x254>
 8006ae4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006ae8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006aec:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006af0:	ed84 7a00 	vstr	s14, [r4]
 8006af4:	e7bc      	b.n	8006a70 <__ieee754_rem_pio2f+0x104>
 8006af6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8006afa:	d306      	bcc.n	8006b0a <__ieee754_rem_pio2f+0x19e>
 8006afc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006b00:	edc0 7a01 	vstr	s15, [r0, #4]
 8006b04:	edc0 7a00 	vstr	s15, [r0]
 8006b08:	e73e      	b.n	8006988 <__ieee754_rem_pio2f+0x1c>
 8006b0a:	15ea      	asrs	r2, r5, #23
 8006b0c:	3a86      	subs	r2, #134	@ 0x86
 8006b0e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b1a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006bc4 <__ieee754_rem_pio2f+0x258>
 8006b1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b26:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b3a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006b3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	edcd 7a05 	vstr	s15, [sp, #20]
 8006b4e:	d11e      	bne.n	8006b8e <__ieee754_rem_pio2f+0x222>
 8006b50:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2302      	movne	r3, #2
 8006b5e:	491a      	ldr	r1, [pc, #104]	@ (8006bc8 <__ieee754_rem_pio2f+0x25c>)
 8006b60:	9101      	str	r1, [sp, #4]
 8006b62:	2102      	movs	r1, #2
 8006b64:	9100      	str	r1, [sp, #0]
 8006b66:	a803      	add	r0, sp, #12
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f000 f90b 	bl	8006d84 <__kernel_rem_pio2f>
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	f6bf af2f 	bge.w	80069d2 <__ieee754_rem_pio2f+0x66>
 8006b74:	edd4 7a00 	vldr	s15, [r4]
 8006b78:	eef1 7a67 	vneg.f32	s15, s15
 8006b7c:	edc4 7a00 	vstr	s15, [r4]
 8006b80:	edd4 7a01 	vldr	s15, [r4, #4]
 8006b84:	eef1 7a67 	vneg.f32	s15, s15
 8006b88:	edc4 7a01 	vstr	s15, [r4, #4]
 8006b8c:	e782      	b.n	8006a94 <__ieee754_rem_pio2f+0x128>
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e7e5      	b.n	8006b5e <__ieee754_rem_pio2f+0x1f2>
 8006b92:	bf00      	nop
 8006b94:	3f490fd8 	.word	0x3f490fd8
 8006b98:	4016cbe3 	.word	0x4016cbe3
 8006b9c:	3fc90f80 	.word	0x3fc90f80
 8006ba0:	3fc90fd0 	.word	0x3fc90fd0
 8006ba4:	37354400 	.word	0x37354400
 8006ba8:	37354443 	.word	0x37354443
 8006bac:	2e85a308 	.word	0x2e85a308
 8006bb0:	43490f80 	.word	0x43490f80
 8006bb4:	3f22f984 	.word	0x3f22f984
 8006bb8:	080073f0 	.word	0x080073f0
 8006bbc:	2e85a300 	.word	0x2e85a300
 8006bc0:	248d3132 	.word	0x248d3132
 8006bc4:	43800000 	.word	0x43800000
 8006bc8:	08007470 	.word	0x08007470

08006bcc <atanf>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	ee10 5a10 	vmov	r5, s0
 8006bd2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8006bd6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8006bda:	eef0 7a40 	vmov.f32	s15, s0
 8006bde:	d310      	bcc.n	8006c02 <atanf+0x36>
 8006be0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8006be4:	d904      	bls.n	8006bf0 <atanf+0x24>
 8006be6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006bea:	eeb0 0a67 	vmov.f32	s0, s15
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006d28 <atanf+0x15c>
 8006bf4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006d2c <atanf+0x160>
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	bfc8      	it	gt
 8006bfc:	eef0 7a47 	vmovgt.f32	s15, s14
 8006c00:	e7f3      	b.n	8006bea <atanf+0x1e>
 8006c02:	4b4b      	ldr	r3, [pc, #300]	@ (8006d30 <atanf+0x164>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	d810      	bhi.n	8006c2a <atanf+0x5e>
 8006c08:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8006c0c:	d20a      	bcs.n	8006c24 <atanf+0x58>
 8006c0e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006d34 <atanf+0x168>
 8006c12:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c22:	dce2      	bgt.n	8006bea <atanf+0x1e>
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295
 8006c28:	e013      	b.n	8006c52 <atanf+0x86>
 8006c2a:	f000 f8a3 	bl	8006d74 <fabsf>
 8006c2e:	4b42      	ldr	r3, [pc, #264]	@ (8006d38 <atanf+0x16c>)
 8006c30:	429c      	cmp	r4, r3
 8006c32:	d84f      	bhi.n	8006cd4 <atanf+0x108>
 8006c34:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d841      	bhi.n	8006cc0 <atanf+0xf4>
 8006c3c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8006c40:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006c44:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006c48:	2300      	movs	r3, #0
 8006c4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006c58:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006d3c <atanf+0x170>
 8006c5c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8006d40 <atanf+0x174>
 8006c60:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8006d44 <atanf+0x178>
 8006c64:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006c68:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006c6c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006d48 <atanf+0x17c>
 8006c70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006c74:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006d4c <atanf+0x180>
 8006c78:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006c7c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006d50 <atanf+0x184>
 8006c80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006c84:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d54 <atanf+0x188>
 8006c88:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006c8c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006d58 <atanf+0x18c>
 8006c90:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006c94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006d5c <atanf+0x190>
 8006c98:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006c9c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8006d60 <atanf+0x194>
 8006ca0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006ca4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006d64 <atanf+0x198>
 8006ca8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006cac:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006cb0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006cb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cb8:	d121      	bne.n	8006cfe <atanf+0x132>
 8006cba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cbe:	e794      	b.n	8006bea <atanf+0x1e>
 8006cc0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006cc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006cc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ccc:	2301      	movs	r3, #1
 8006cce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006cd2:	e7be      	b.n	8006c52 <atanf+0x86>
 8006cd4:	4b24      	ldr	r3, [pc, #144]	@ (8006d68 <atanf+0x19c>)
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d80b      	bhi.n	8006cf2 <atanf+0x126>
 8006cda:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8006cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ce2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf0:	e7af      	b.n	8006c52 <atanf+0x86>
 8006cf2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006cf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e7a9      	b.n	8006c52 <atanf+0x86>
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <atanf+0x1a0>)
 8006d00:	491b      	ldr	r1, [pc, #108]	@ (8006d70 <atanf+0x1a4>)
 8006d02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006d06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006d0a:	edd3 6a00 	vldr	s13, [r3]
 8006d0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d18:	edd2 7a00 	vldr	s15, [r2]
 8006d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d20:	bfb8      	it	lt
 8006d22:	eef1 7a67 	vneglt.f32	s15, s15
 8006d26:	e760      	b.n	8006bea <atanf+0x1e>
 8006d28:	bfc90fdb 	.word	0xbfc90fdb
 8006d2c:	3fc90fdb 	.word	0x3fc90fdb
 8006d30:	3edfffff 	.word	0x3edfffff
 8006d34:	7149f2ca 	.word	0x7149f2ca
 8006d38:	3f97ffff 	.word	0x3f97ffff
 8006d3c:	3c8569d7 	.word	0x3c8569d7
 8006d40:	3d4bda59 	.word	0x3d4bda59
 8006d44:	bd6ef16b 	.word	0xbd6ef16b
 8006d48:	3d886b35 	.word	0x3d886b35
 8006d4c:	3dba2e6e 	.word	0x3dba2e6e
 8006d50:	3e124925 	.word	0x3e124925
 8006d54:	3eaaaaab 	.word	0x3eaaaaab
 8006d58:	bd15a221 	.word	0xbd15a221
 8006d5c:	bd9d8795 	.word	0xbd9d8795
 8006d60:	bde38e38 	.word	0xbde38e38
 8006d64:	be4ccccd 	.word	0xbe4ccccd
 8006d68:	401bffff 	.word	0x401bffff
 8006d6c:	08007798 	.word	0x08007798
 8006d70:	08007788 	.word	0x08007788

08006d74 <fabsf>:
 8006d74:	ee10 3a10 	vmov	r3, s0
 8006d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d7c:	ee00 3a10 	vmov	s0, r3
 8006d80:	4770      	bx	lr
	...

08006d84 <__kernel_rem_pio2f>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	ed2d 8b04 	vpush	{d8-d9}
 8006d8c:	b0d9      	sub	sp, #356	@ 0x164
 8006d8e:	4690      	mov	r8, r2
 8006d90:	9001      	str	r0, [sp, #4]
 8006d92:	4ab6      	ldr	r2, [pc, #728]	@ (800706c <__kernel_rem_pio2f+0x2e8>)
 8006d94:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8006d96:	f118 0f04 	cmn.w	r8, #4
 8006d9a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8006d9e:	460f      	mov	r7, r1
 8006da0:	f103 3bff 	add.w	fp, r3, #4294967295
 8006da4:	db26      	blt.n	8006df4 <__kernel_rem_pio2f+0x70>
 8006da6:	f1b8 0203 	subs.w	r2, r8, #3
 8006daa:	bf48      	it	mi
 8006dac:	f108 0204 	addmi.w	r2, r8, #4
 8006db0:	10d2      	asrs	r2, r2, #3
 8006db2:	1c55      	adds	r5, r2, #1
 8006db4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006db6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 8006dba:	00e8      	lsls	r0, r5, #3
 8006dbc:	eba2 060b 	sub.w	r6, r2, fp
 8006dc0:	9002      	str	r0, [sp, #8]
 8006dc2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8006dc6:	eb0a 0c0b 	add.w	ip, sl, fp
 8006dca:	ac1c      	add	r4, sp, #112	@ 0x70
 8006dcc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	4560      	cmp	r0, ip
 8006dd4:	dd10      	ble.n	8006df8 <__kernel_rem_pio2f+0x74>
 8006dd6:	a91c      	add	r1, sp, #112	@ 0x70
 8006dd8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8006ddc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8006de0:	2600      	movs	r6, #0
 8006de2:	4556      	cmp	r6, sl
 8006de4:	dc24      	bgt.n	8006e30 <__kernel_rem_pio2f+0xac>
 8006de6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006dea:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 8006dee:	4684      	mov	ip, r0
 8006df0:	2400      	movs	r4, #0
 8006df2:	e016      	b.n	8006e22 <__kernel_rem_pio2f+0x9e>
 8006df4:	2200      	movs	r2, #0
 8006df6:	e7dc      	b.n	8006db2 <__kernel_rem_pio2f+0x2e>
 8006df8:	42c6      	cmn	r6, r0
 8006dfa:	bf5d      	ittte	pl
 8006dfc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006e00:	ee07 1a90 	vmovpl	s15, r1
 8006e04:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006e08:	eef0 7a47 	vmovmi.f32	s15, s14
 8006e0c:	ece4 7a01 	vstmia	r4!, {s15}
 8006e10:	3001      	adds	r0, #1
 8006e12:	e7de      	b.n	8006dd2 <__kernel_rem_pio2f+0x4e>
 8006e14:	ecfe 6a01 	vldmia	lr!, {s13}
 8006e18:	ed3c 7a01 	vldmdb	ip!, {s14}
 8006e1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006e20:	3401      	adds	r4, #1
 8006e22:	455c      	cmp	r4, fp
 8006e24:	ddf6      	ble.n	8006e14 <__kernel_rem_pio2f+0x90>
 8006e26:	ece9 7a01 	vstmia	r9!, {s15}
 8006e2a:	3601      	adds	r6, #1
 8006e2c:	3004      	adds	r0, #4
 8006e2e:	e7d8      	b.n	8006de2 <__kernel_rem_pio2f+0x5e>
 8006e30:	a908      	add	r1, sp, #32
 8006e32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e36:	9104      	str	r1, [sp, #16]
 8006e38:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006e3a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8007078 <__kernel_rem_pio2f+0x2f4>
 8006e3e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8007074 <__kernel_rem_pio2f+0x2f0>
 8006e42:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006e46:	9203      	str	r2, [sp, #12]
 8006e48:	4654      	mov	r4, sl
 8006e4a:	00a2      	lsls	r2, r4, #2
 8006e4c:	9205      	str	r2, [sp, #20]
 8006e4e:	aa58      	add	r2, sp, #352	@ 0x160
 8006e50:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006e54:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006e58:	a944      	add	r1, sp, #272	@ 0x110
 8006e5a:	aa08      	add	r2, sp, #32
 8006e5c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006e60:	4694      	mov	ip, r2
 8006e62:	4626      	mov	r6, r4
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	dc4c      	bgt.n	8006f02 <__kernel_rem_pio2f+0x17e>
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e6e:	f000 f9f1 	bl	8007254 <scalbnf>
 8006e72:	eeb0 8a40 	vmov.f32	s16, s0
 8006e76:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8006e7a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006e7e:	f000 fa4f 	bl	8007320 <floorf>
 8006e82:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8006e86:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006e8a:	2d00      	cmp	r5, #0
 8006e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e90:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006e94:	ee17 9a90 	vmov	r9, s15
 8006e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e9c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006ea0:	dd41      	ble.n	8006f26 <__kernel_rem_pio2f+0x1a2>
 8006ea2:	f104 3cff 	add.w	ip, r4, #4294967295
 8006ea6:	a908      	add	r1, sp, #32
 8006ea8:	f1c5 0e08 	rsb	lr, r5, #8
 8006eac:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006eb0:	fa46 f00e 	asr.w	r0, r6, lr
 8006eb4:	4481      	add	r9, r0
 8006eb6:	fa00 f00e 	lsl.w	r0, r0, lr
 8006eba:	1a36      	subs	r6, r6, r0
 8006ebc:	f1c5 0007 	rsb	r0, r5, #7
 8006ec0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8006ec4:	4106      	asrs	r6, r0
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	dd3c      	ble.n	8006f44 <__kernel_rem_pio2f+0x1c0>
 8006eca:	f04f 0e00 	mov.w	lr, #0
 8006ece:	f109 0901 	add.w	r9, r9, #1
 8006ed2:	4670      	mov	r0, lr
 8006ed4:	4574      	cmp	r4, lr
 8006ed6:	dc68      	bgt.n	8006faa <__kernel_rem_pio2f+0x226>
 8006ed8:	2d00      	cmp	r5, #0
 8006eda:	dd03      	ble.n	8006ee4 <__kernel_rem_pio2f+0x160>
 8006edc:	2d01      	cmp	r5, #1
 8006ede:	d074      	beq.n	8006fca <__kernel_rem_pio2f+0x246>
 8006ee0:	2d02      	cmp	r5, #2
 8006ee2:	d07d      	beq.n	8006fe0 <__kernel_rem_pio2f+0x25c>
 8006ee4:	2e02      	cmp	r6, #2
 8006ee6:	d12d      	bne.n	8006f44 <__kernel_rem_pio2f+0x1c0>
 8006ee8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006eec:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006ef0:	b340      	cbz	r0, 8006f44 <__kernel_rem_pio2f+0x1c0>
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	9306      	str	r3, [sp, #24]
 8006ef6:	f000 f9ad 	bl	8007254 <scalbnf>
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006f00:	e020      	b.n	8006f44 <__kernel_rem_pio2f+0x1c0>
 8006f02:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006f06:	3e01      	subs	r6, #1
 8006f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f10:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006f14:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006f18:	ecac 0a01 	vstmia	ip!, {s0}
 8006f1c:	ed30 0a01 	vldmdb	r0!, {s0}
 8006f20:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006f24:	e79e      	b.n	8006e64 <__kernel_rem_pio2f+0xe0>
 8006f26:	d105      	bne.n	8006f34 <__kernel_rem_pio2f+0x1b0>
 8006f28:	1e60      	subs	r0, r4, #1
 8006f2a:	a908      	add	r1, sp, #32
 8006f2c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006f30:	11f6      	asrs	r6, r6, #7
 8006f32:	e7c8      	b.n	8006ec6 <__kernel_rem_pio2f+0x142>
 8006f34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006f38:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f40:	da31      	bge.n	8006fa6 <__kernel_rem_pio2f+0x222>
 8006f42:	2600      	movs	r6, #0
 8006f44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4c:	f040 8098 	bne.w	8007080 <__kernel_rem_pio2f+0x2fc>
 8006f50:	1e60      	subs	r0, r4, #1
 8006f52:	2200      	movs	r2, #0
 8006f54:	4550      	cmp	r0, sl
 8006f56:	da4b      	bge.n	8006ff0 <__kernel_rem_pio2f+0x26c>
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	d065      	beq.n	8007028 <__kernel_rem_pio2f+0x2a4>
 8006f5c:	3c01      	subs	r4, #1
 8006f5e:	ab08      	add	r3, sp, #32
 8006f60:	3d08      	subs	r5, #8
 8006f62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f8      	beq.n	8006f5c <__kernel_rem_pio2f+0x1d8>
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006f70:	f000 f970 	bl	8007254 <scalbnf>
 8006f74:	1c63      	adds	r3, r4, #1
 8006f76:	aa44      	add	r2, sp, #272	@ 0x110
 8006f78:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007078 <__kernel_rem_pio2f+0x2f4>
 8006f7c:	0099      	lsls	r1, r3, #2
 8006f7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006f82:	4623      	mov	r3, r4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f280 80a9 	bge.w	80070dc <__kernel_rem_pio2f+0x358>
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f2c0 80c7 	blt.w	8007120 <__kernel_rem_pio2f+0x39c>
 8006f92:	aa44      	add	r2, sp, #272	@ 0x110
 8006f94:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006f98:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007070 <__kernel_rem_pio2f+0x2ec>
 8006f9c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	1ae2      	subs	r2, r4, r3
 8006fa4:	e0b1      	b.n	800710a <__kernel_rem_pio2f+0x386>
 8006fa6:	2602      	movs	r6, #2
 8006fa8:	e78f      	b.n	8006eca <__kernel_rem_pio2f+0x146>
 8006faa:	f852 1b04 	ldr.w	r1, [r2], #4
 8006fae:	b948      	cbnz	r0, 8006fc4 <__kernel_rem_pio2f+0x240>
 8006fb0:	b121      	cbz	r1, 8006fbc <__kernel_rem_pio2f+0x238>
 8006fb2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006fb6:	f842 1c04 	str.w	r1, [r2, #-4]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	f10e 0e01 	add.w	lr, lr, #1
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	e787      	b.n	8006ed4 <__kernel_rem_pio2f+0x150>
 8006fc4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006fc8:	e7f5      	b.n	8006fb6 <__kernel_rem_pio2f+0x232>
 8006fca:	f104 3cff 	add.w	ip, r4, #4294967295
 8006fce:	aa08      	add	r2, sp, #32
 8006fd0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006fd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fd8:	a908      	add	r1, sp, #32
 8006fda:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8006fde:	e781      	b.n	8006ee4 <__kernel_rem_pio2f+0x160>
 8006fe0:	f104 3cff 	add.w	ip, r4, #4294967295
 8006fe4:	aa08      	add	r2, sp, #32
 8006fe6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006fea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006fee:	e7f3      	b.n	8006fd8 <__kernel_rem_pio2f+0x254>
 8006ff0:	a908      	add	r1, sp, #32
 8006ff2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006ff6:	3801      	subs	r0, #1
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	e7ab      	b.n	8006f54 <__kernel_rem_pio2f+0x1d0>
 8006ffc:	3201      	adds	r2, #1
 8006ffe:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007002:	2e00      	cmp	r6, #0
 8007004:	d0fa      	beq.n	8006ffc <__kernel_rem_pio2f+0x278>
 8007006:	9905      	ldr	r1, [sp, #20]
 8007008:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800700c:	eb0d 0001 	add.w	r0, sp, r1
 8007010:	18e6      	adds	r6, r4, r3
 8007012:	a91c      	add	r1, sp, #112	@ 0x70
 8007014:	f104 0c01 	add.w	ip, r4, #1
 8007018:	384c      	subs	r0, #76	@ 0x4c
 800701a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800701e:	4422      	add	r2, r4
 8007020:	4562      	cmp	r2, ip
 8007022:	da04      	bge.n	800702e <__kernel_rem_pio2f+0x2aa>
 8007024:	4614      	mov	r4, r2
 8007026:	e710      	b.n	8006e4a <__kernel_rem_pio2f+0xc6>
 8007028:	9804      	ldr	r0, [sp, #16]
 800702a:	2201      	movs	r2, #1
 800702c:	e7e7      	b.n	8006ffe <__kernel_rem_pio2f+0x27a>
 800702e:	9903      	ldr	r1, [sp, #12]
 8007030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007034:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007038:	9105      	str	r1, [sp, #20]
 800703a:	ee07 1a90 	vmov	s15, r1
 800703e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007042:	2400      	movs	r4, #0
 8007044:	ece6 7a01 	vstmia	r6!, {s15}
 8007048:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 800704c:	46b1      	mov	r9, r6
 800704e:	455c      	cmp	r4, fp
 8007050:	dd04      	ble.n	800705c <__kernel_rem_pio2f+0x2d8>
 8007052:	ece0 7a01 	vstmia	r0!, {s15}
 8007056:	f10c 0c01 	add.w	ip, ip, #1
 800705a:	e7e1      	b.n	8007020 <__kernel_rem_pio2f+0x29c>
 800705c:	ecfe 6a01 	vldmia	lr!, {s13}
 8007060:	ed39 7a01 	vldmdb	r9!, {s14}
 8007064:	3401      	adds	r4, #1
 8007066:	eee6 7a87 	vfma.f32	s15, s13, s14
 800706a:	e7f0      	b.n	800704e <__kernel_rem_pio2f+0x2ca>
 800706c:	080077d4 	.word	0x080077d4
 8007070:	080077a8 	.word	0x080077a8
 8007074:	43800000 	.word	0x43800000
 8007078:	3b800000 	.word	0x3b800000
 800707c:	00000000 	.word	0x00000000
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	eeb0 0a48 	vmov.f32	s0, s16
 8007086:	eba3 0008 	sub.w	r0, r3, r8
 800708a:	f000 f8e3 	bl	8007254 <scalbnf>
 800708e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007074 <__kernel_rem_pio2f+0x2f0>
 8007092:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709a:	db19      	blt.n	80070d0 <__kernel_rem_pio2f+0x34c>
 800709c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007078 <__kernel_rem_pio2f+0x2f4>
 80070a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80070a4:	aa08      	add	r2, sp, #32
 80070a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070aa:	3508      	adds	r5, #8
 80070ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80070b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80070bc:	ee10 3a10 	vmov	r3, s0
 80070c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80070c4:	ee17 3a90 	vmov	r3, s15
 80070c8:	3401      	adds	r4, #1
 80070ca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80070ce:	e74c      	b.n	8006f6a <__kernel_rem_pio2f+0x1e6>
 80070d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80070d4:	aa08      	add	r2, sp, #32
 80070d6:	ee10 3a10 	vmov	r3, s0
 80070da:	e7f6      	b.n	80070ca <__kernel_rem_pio2f+0x346>
 80070dc:	a808      	add	r0, sp, #32
 80070de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80070e2:	9001      	str	r0, [sp, #4]
 80070e4:	ee07 0a90 	vmov	s15, r0
 80070e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ec:	3b01      	subs	r3, #1
 80070ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80070f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80070f6:	ed62 7a01 	vstmdb	r2!, {s15}
 80070fa:	e743      	b.n	8006f84 <__kernel_rem_pio2f+0x200>
 80070fc:	ecfc 6a01 	vldmia	ip!, {s13}
 8007100:	ecb5 7a01 	vldmia	r5!, {s14}
 8007104:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007108:	3001      	adds	r0, #1
 800710a:	4550      	cmp	r0, sl
 800710c:	dc01      	bgt.n	8007112 <__kernel_rem_pio2f+0x38e>
 800710e:	4290      	cmp	r0, r2
 8007110:	ddf4      	ble.n	80070fc <__kernel_rem_pio2f+0x378>
 8007112:	a858      	add	r0, sp, #352	@ 0x160
 8007114:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007118:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800711c:	3b01      	subs	r3, #1
 800711e:	e735      	b.n	8006f8c <__kernel_rem_pio2f+0x208>
 8007120:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007122:	2b02      	cmp	r3, #2
 8007124:	dc09      	bgt.n	800713a <__kernel_rem_pio2f+0x3b6>
 8007126:	2b00      	cmp	r3, #0
 8007128:	dc27      	bgt.n	800717a <__kernel_rem_pio2f+0x3f6>
 800712a:	d040      	beq.n	80071ae <__kernel_rem_pio2f+0x42a>
 800712c:	f009 0007 	and.w	r0, r9, #7
 8007130:	b059      	add	sp, #356	@ 0x164
 8007132:	ecbd 8b04 	vpop	{d8-d9}
 8007136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800713c:	2b03      	cmp	r3, #3
 800713e:	d1f5      	bne.n	800712c <__kernel_rem_pio2f+0x3a8>
 8007140:	aa30      	add	r2, sp, #192	@ 0xc0
 8007142:	1f0b      	subs	r3, r1, #4
 8007144:	4413      	add	r3, r2
 8007146:	461a      	mov	r2, r3
 8007148:	4620      	mov	r0, r4
 800714a:	2800      	cmp	r0, #0
 800714c:	dc50      	bgt.n	80071f0 <__kernel_rem_pio2f+0x46c>
 800714e:	4622      	mov	r2, r4
 8007150:	2a01      	cmp	r2, #1
 8007152:	dc5d      	bgt.n	8007210 <__kernel_rem_pio2f+0x48c>
 8007154:	ab30      	add	r3, sp, #192	@ 0xc0
 8007156:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 800715a:	440b      	add	r3, r1
 800715c:	2c01      	cmp	r4, #1
 800715e:	dc67      	bgt.n	8007230 <__kernel_rem_pio2f+0x4ac>
 8007160:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8007164:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8007168:	2e00      	cmp	r6, #0
 800716a:	d167      	bne.n	800723c <__kernel_rem_pio2f+0x4b8>
 800716c:	edc7 6a00 	vstr	s13, [r7]
 8007170:	ed87 7a01 	vstr	s14, [r7, #4]
 8007174:	edc7 7a02 	vstr	s15, [r7, #8]
 8007178:	e7d8      	b.n	800712c <__kernel_rem_pio2f+0x3a8>
 800717a:	ab30      	add	r3, sp, #192	@ 0xc0
 800717c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 8007180:	440b      	add	r3, r1
 8007182:	4622      	mov	r2, r4
 8007184:	2a00      	cmp	r2, #0
 8007186:	da24      	bge.n	80071d2 <__kernel_rem_pio2f+0x44e>
 8007188:	b34e      	cbz	r6, 80071de <__kernel_rem_pio2f+0x45a>
 800718a:	eef1 7a47 	vneg.f32	s15, s14
 800718e:	edc7 7a00 	vstr	s15, [r7]
 8007192:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8007196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800719a:	aa31      	add	r2, sp, #196	@ 0xc4
 800719c:	2301      	movs	r3, #1
 800719e:	429c      	cmp	r4, r3
 80071a0:	da20      	bge.n	80071e4 <__kernel_rem_pio2f+0x460>
 80071a2:	b10e      	cbz	r6, 80071a8 <__kernel_rem_pio2f+0x424>
 80071a4:	eef1 7a67 	vneg.f32	s15, s15
 80071a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80071ac:	e7be      	b.n	800712c <__kernel_rem_pio2f+0x3a8>
 80071ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80071b0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800707c <__kernel_rem_pio2f+0x2f8>
 80071b4:	440b      	add	r3, r1
 80071b6:	2c00      	cmp	r4, #0
 80071b8:	da05      	bge.n	80071c6 <__kernel_rem_pio2f+0x442>
 80071ba:	b10e      	cbz	r6, 80071c0 <__kernel_rem_pio2f+0x43c>
 80071bc:	eef1 7a67 	vneg.f32	s15, s15
 80071c0:	edc7 7a00 	vstr	s15, [r7]
 80071c4:	e7b2      	b.n	800712c <__kernel_rem_pio2f+0x3a8>
 80071c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80071ca:	3c01      	subs	r4, #1
 80071cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071d0:	e7f1      	b.n	80071b6 <__kernel_rem_pio2f+0x432>
 80071d2:	ed73 7a01 	vldmdb	r3!, {s15}
 80071d6:	3a01      	subs	r2, #1
 80071d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071dc:	e7d2      	b.n	8007184 <__kernel_rem_pio2f+0x400>
 80071de:	eef0 7a47 	vmov.f32	s15, s14
 80071e2:	e7d4      	b.n	800718e <__kernel_rem_pio2f+0x40a>
 80071e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80071e8:	3301      	adds	r3, #1
 80071ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071ee:	e7d6      	b.n	800719e <__kernel_rem_pio2f+0x41a>
 80071f0:	ed72 7a01 	vldmdb	r2!, {s15}
 80071f4:	edd2 6a01 	vldr	s13, [r2, #4]
 80071f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80071fc:	3801      	subs	r0, #1
 80071fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007202:	ed82 7a00 	vstr	s14, [r2]
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	edc2 7a01 	vstr	s15, [r2, #4]
 800720e:	e79c      	b.n	800714a <__kernel_rem_pio2f+0x3c6>
 8007210:	ed73 7a01 	vldmdb	r3!, {s15}
 8007214:	edd3 6a01 	vldr	s13, [r3, #4]
 8007218:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800721c:	3a01      	subs	r2, #1
 800721e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007222:	ed83 7a00 	vstr	s14, [r3]
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	edc3 7a01 	vstr	s15, [r3, #4]
 800722e:	e78f      	b.n	8007150 <__kernel_rem_pio2f+0x3cc>
 8007230:	ed33 7a01 	vldmdb	r3!, {s14}
 8007234:	3c01      	subs	r4, #1
 8007236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800723a:	e78f      	b.n	800715c <__kernel_rem_pio2f+0x3d8>
 800723c:	eef1 6a66 	vneg.f32	s13, s13
 8007240:	eeb1 7a47 	vneg.f32	s14, s14
 8007244:	edc7 6a00 	vstr	s13, [r7]
 8007248:	ed87 7a01 	vstr	s14, [r7, #4]
 800724c:	eef1 7a67 	vneg.f32	s15, s15
 8007250:	e790      	b.n	8007174 <__kernel_rem_pio2f+0x3f0>
 8007252:	bf00      	nop

08007254 <scalbnf>:
 8007254:	ee10 3a10 	vmov	r3, s0
 8007258:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800725c:	d02b      	beq.n	80072b6 <scalbnf+0x62>
 800725e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007262:	d302      	bcc.n	800726a <scalbnf+0x16>
 8007264:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007268:	4770      	bx	lr
 800726a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800726e:	d123      	bne.n	80072b8 <scalbnf+0x64>
 8007270:	4b24      	ldr	r3, [pc, #144]	@ (8007304 <scalbnf+0xb0>)
 8007272:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007308 <scalbnf+0xb4>
 8007276:	4298      	cmp	r0, r3
 8007278:	ee20 0a27 	vmul.f32	s0, s0, s15
 800727c:	db17      	blt.n	80072ae <scalbnf+0x5a>
 800727e:	ee10 3a10 	vmov	r3, s0
 8007282:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007286:	3a19      	subs	r2, #25
 8007288:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800728c:	4288      	cmp	r0, r1
 800728e:	dd15      	ble.n	80072bc <scalbnf+0x68>
 8007290:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800730c <scalbnf+0xb8>
 8007294:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007310 <scalbnf+0xbc>
 8007298:	ee10 3a10 	vmov	r3, s0
 800729c:	eeb0 7a67 	vmov.f32	s14, s15
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfb8      	it	lt
 80072a4:	eef0 7a66 	vmovlt.f32	s15, s13
 80072a8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80072ac:	4770      	bx	lr
 80072ae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007314 <scalbnf+0xc0>
 80072b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80072b6:	4770      	bx	lr
 80072b8:	0dd2      	lsrs	r2, r2, #23
 80072ba:	e7e5      	b.n	8007288 <scalbnf+0x34>
 80072bc:	4410      	add	r0, r2
 80072be:	28fe      	cmp	r0, #254	@ 0xfe
 80072c0:	dce6      	bgt.n	8007290 <scalbnf+0x3c>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	dd06      	ble.n	80072d4 <scalbnf+0x80>
 80072c6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80072ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80072ce:	ee00 3a10 	vmov	s0, r3
 80072d2:	4770      	bx	lr
 80072d4:	f110 0f16 	cmn.w	r0, #22
 80072d8:	da09      	bge.n	80072ee <scalbnf+0x9a>
 80072da:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007314 <scalbnf+0xc0>
 80072de:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007318 <scalbnf+0xc4>
 80072e2:	ee10 3a10 	vmov	r3, s0
 80072e6:	eeb0 7a67 	vmov.f32	s14, s15
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	e7d9      	b.n	80072a2 <scalbnf+0x4e>
 80072ee:	3019      	adds	r0, #25
 80072f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80072f4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80072f8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800731c <scalbnf+0xc8>
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	e7d7      	b.n	80072b2 <scalbnf+0x5e>
 8007302:	bf00      	nop
 8007304:	ffff3cb0 	.word	0xffff3cb0
 8007308:	4c000000 	.word	0x4c000000
 800730c:	7149f2ca 	.word	0x7149f2ca
 8007310:	f149f2ca 	.word	0xf149f2ca
 8007314:	0da24260 	.word	0x0da24260
 8007318:	8da24260 	.word	0x8da24260
 800731c:	33000000 	.word	0x33000000

08007320 <floorf>:
 8007320:	ee10 3a10 	vmov	r3, s0
 8007324:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007328:	3a7f      	subs	r2, #127	@ 0x7f
 800732a:	2a16      	cmp	r2, #22
 800732c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007330:	dc2b      	bgt.n	800738a <floorf+0x6a>
 8007332:	2a00      	cmp	r2, #0
 8007334:	da12      	bge.n	800735c <floorf+0x3c>
 8007336:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800739c <floorf+0x7c>
 800733a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800733e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	dd06      	ble.n	8007356 <floorf+0x36>
 8007348:	2b00      	cmp	r3, #0
 800734a:	da24      	bge.n	8007396 <floorf+0x76>
 800734c:	2900      	cmp	r1, #0
 800734e:	4b14      	ldr	r3, [pc, #80]	@ (80073a0 <floorf+0x80>)
 8007350:	bf08      	it	eq
 8007352:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8007356:	ee00 3a10 	vmov	s0, r3
 800735a:	4770      	bx	lr
 800735c:	4911      	ldr	r1, [pc, #68]	@ (80073a4 <floorf+0x84>)
 800735e:	4111      	asrs	r1, r2
 8007360:	420b      	tst	r3, r1
 8007362:	d0fa      	beq.n	800735a <floorf+0x3a>
 8007364:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800739c <floorf+0x7c>
 8007368:	ee30 0a27 	vadd.f32	s0, s0, s15
 800736c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007374:	ddef      	ble.n	8007356 <floorf+0x36>
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfbe      	ittt	lt
 800737a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800737e:	fa40 f202 	asrlt.w	r2, r0, r2
 8007382:	189b      	addlt	r3, r3, r2
 8007384:	ea23 0301 	bic.w	r3, r3, r1
 8007388:	e7e5      	b.n	8007356 <floorf+0x36>
 800738a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800738e:	d3e4      	bcc.n	800735a <floorf+0x3a>
 8007390:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007394:	4770      	bx	lr
 8007396:	2300      	movs	r3, #0
 8007398:	e7dd      	b.n	8007356 <floorf+0x36>
 800739a:	bf00      	nop
 800739c:	7149f2ca 	.word	0x7149f2ca
 80073a0:	bf800000 	.word	0xbf800000
 80073a4:	007fffff 	.word	0x007fffff

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
